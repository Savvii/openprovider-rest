<?php
/**
 * DomainUpdateAdditionalData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * DomainUpdateAdditionalData Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainUpdateAdditionalData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domainUpdateAdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'abogado_acceptance' => 'string',
        'admin_sing_pass_id' => 'string',
        'auth_code' => 'string',
        'company_registration_number' => 'string',
        'customer_uin' => 'string',
        'customer_uin_doc_type' => '\Savvii\OpenproviderRest\Model\DomainUINDocumentType',
        'domain_name_variants' => 'string[]',
        'intended_use' => 'string',
        'law_acceptance' => 'string',
        'maintainer' => 'string',
        'membership_id' => 'string',
        'mobile_phone_number_verification' => 'string',
        'ngo_ong_eligibility_acceptance' => 'string',
        'ngo_ong_policy_acceptance' => 'string',
        'passport_number' => 'string',
        'vat' => 'string',
        'verification_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'abogado_acceptance' => null,
        'admin_sing_pass_id' => null,
        'auth_code' => null,
        'company_registration_number' => null,
        'customer_uin' => null,
        'customer_uin_doc_type' => null,
        'domain_name_variants' => null,
        'intended_use' => null,
        'law_acceptance' => null,
        'maintainer' => null,
        'membership_id' => null,
        'mobile_phone_number_verification' => null,
        'ngo_ong_eligibility_acceptance' => null,
        'ngo_ong_policy_acceptance' => null,
        'passport_number' => null,
        'vat' => null,
        'verification_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'abogado_acceptance' => false,
		'admin_sing_pass_id' => false,
		'auth_code' => false,
		'company_registration_number' => false,
		'customer_uin' => false,
		'customer_uin_doc_type' => false,
		'domain_name_variants' => false,
		'intended_use' => false,
		'law_acceptance' => false,
		'maintainer' => false,
		'membership_id' => false,
		'mobile_phone_number_verification' => false,
		'ngo_ong_eligibility_acceptance' => false,
		'ngo_ong_policy_acceptance' => false,
		'passport_number' => false,
		'vat' => false,
		'verification_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abogado_acceptance' => 'abogado_acceptance',
        'admin_sing_pass_id' => 'admin_sing_pass_id',
        'auth_code' => 'auth_code',
        'company_registration_number' => 'company_registration_number',
        'customer_uin' => 'customer_uin',
        'customer_uin_doc_type' => 'customer_uin_doc_type',
        'domain_name_variants' => 'domain_name_variants',
        'intended_use' => 'intended_use',
        'law_acceptance' => 'law_acceptance',
        'maintainer' => 'maintainer',
        'membership_id' => 'membership_id',
        'mobile_phone_number_verification' => 'mobile_phone_number_verification',
        'ngo_ong_eligibility_acceptance' => 'ngo_ong_eligibility_acceptance',
        'ngo_ong_policy_acceptance' => 'ngo_ong_policy_acceptance',
        'passport_number' => 'passport_number',
        'vat' => 'vat',
        'verification_code' => 'verification_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abogado_acceptance' => 'setAbogadoAcceptance',
        'admin_sing_pass_id' => 'setAdminSingPassId',
        'auth_code' => 'setAuthCode',
        'company_registration_number' => 'setCompanyRegistrationNumber',
        'customer_uin' => 'setCustomerUin',
        'customer_uin_doc_type' => 'setCustomerUinDocType',
        'domain_name_variants' => 'setDomainNameVariants',
        'intended_use' => 'setIntendedUse',
        'law_acceptance' => 'setLawAcceptance',
        'maintainer' => 'setMaintainer',
        'membership_id' => 'setMembershipId',
        'mobile_phone_number_verification' => 'setMobilePhoneNumberVerification',
        'ngo_ong_eligibility_acceptance' => 'setNgoOngEligibilityAcceptance',
        'ngo_ong_policy_acceptance' => 'setNgoOngPolicyAcceptance',
        'passport_number' => 'setPassportNumber',
        'vat' => 'setVat',
        'verification_code' => 'setVerificationCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abogado_acceptance' => 'getAbogadoAcceptance',
        'admin_sing_pass_id' => 'getAdminSingPassId',
        'auth_code' => 'getAuthCode',
        'company_registration_number' => 'getCompanyRegistrationNumber',
        'customer_uin' => 'getCustomerUin',
        'customer_uin_doc_type' => 'getCustomerUinDocType',
        'domain_name_variants' => 'getDomainNameVariants',
        'intended_use' => 'getIntendedUse',
        'law_acceptance' => 'getLawAcceptance',
        'maintainer' => 'getMaintainer',
        'membership_id' => 'getMembershipId',
        'mobile_phone_number_verification' => 'getMobilePhoneNumberVerification',
        'ngo_ong_eligibility_acceptance' => 'getNgoOngEligibilityAcceptance',
        'ngo_ong_policy_acceptance' => 'getNgoOngPolicyAcceptance',
        'passport_number' => 'getPassportNumber',
        'vat' => 'getVat',
        'verification_code' => 'getVerificationCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('abogado_acceptance', $data ?? [], null);
        $this->setIfExists('admin_sing_pass_id', $data ?? [], null);
        $this->setIfExists('auth_code', $data ?? [], null);
        $this->setIfExists('company_registration_number', $data ?? [], null);
        $this->setIfExists('customer_uin', $data ?? [], null);
        $this->setIfExists('customer_uin_doc_type', $data ?? [], null);
        $this->setIfExists('domain_name_variants', $data ?? [], null);
        $this->setIfExists('intended_use', $data ?? [], null);
        $this->setIfExists('law_acceptance', $data ?? [], null);
        $this->setIfExists('maintainer', $data ?? [], null);
        $this->setIfExists('membership_id', $data ?? [], null);
        $this->setIfExists('mobile_phone_number_verification', $data ?? [], null);
        $this->setIfExists('ngo_ong_eligibility_acceptance', $data ?? [], null);
        $this->setIfExists('ngo_ong_policy_acceptance', $data ?? [], null);
        $this->setIfExists('passport_number', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('verification_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abogado_acceptance
     *
     * @return string|null
     */
    public function getAbogadoAcceptance()
    {
        return $this->container['abogado_acceptance'];
    }

    /**
     * Sets abogado_acceptance
     *
     * @param string|null $abogado_acceptance abogado_acceptance
     *
     * @return self
     */
    public function setAbogadoAcceptance($abogado_acceptance)
    {
        if (is_null($abogado_acceptance)) {
            throw new \InvalidArgumentException('non-nullable abogado_acceptance cannot be null');
        }
        $this->container['abogado_acceptance'] = $abogado_acceptance;

        return $this;
    }

    /**
     * Gets admin_sing_pass_id
     *
     * @return string|null
     */
    public function getAdminSingPassId()
    {
        return $this->container['admin_sing_pass_id'];
    }

    /**
     * Sets admin_sing_pass_id
     *
     * @param string|null $admin_sing_pass_id admin_sing_pass_id
     *
     * @return self
     */
    public function setAdminSingPassId($admin_sing_pass_id)
    {
        if (is_null($admin_sing_pass_id)) {
            throw new \InvalidArgumentException('non-nullable admin_sing_pass_id cannot be null');
        }
        $this->container['admin_sing_pass_id'] = $admin_sing_pass_id;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string|null
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string|null $auth_code auth_code
     *
     * @return self
     */
    public function setAuthCode($auth_code)
    {
        if (is_null($auth_code)) {
            throw new \InvalidArgumentException('non-nullable auth_code cannot be null');
        }
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets company_registration_number
     *
     * @return string|null
     */
    public function getCompanyRegistrationNumber()
    {
        return $this->container['company_registration_number'];
    }

    /**
     * Sets company_registration_number
     *
     * @param string|null $company_registration_number company_registration_number
     *
     * @return self
     */
    public function setCompanyRegistrationNumber($company_registration_number)
    {
        if (is_null($company_registration_number)) {
            throw new \InvalidArgumentException('non-nullable company_registration_number cannot be null');
        }
        $this->container['company_registration_number'] = $company_registration_number;

        return $this;
    }

    /**
     * Gets customer_uin
     *
     * @return string|null
     */
    public function getCustomerUin()
    {
        return $this->container['customer_uin'];
    }

    /**
     * Sets customer_uin
     *
     * @param string|null $customer_uin customer_uin
     *
     * @return self
     */
    public function setCustomerUin($customer_uin)
    {
        if (is_null($customer_uin)) {
            throw new \InvalidArgumentException('non-nullable customer_uin cannot be null');
        }
        $this->container['customer_uin'] = $customer_uin;

        return $this;
    }

    /**
     * Gets customer_uin_doc_type
     *
     * @return \Savvii\OpenproviderRest\Model\DomainUINDocumentType|null
     */
    public function getCustomerUinDocType()
    {
        return $this->container['customer_uin_doc_type'];
    }

    /**
     * Sets customer_uin_doc_type
     *
     * @param \Savvii\OpenproviderRest\Model\DomainUINDocumentType|null $customer_uin_doc_type customer_uin_doc_type
     *
     * @return self
     */
    public function setCustomerUinDocType($customer_uin_doc_type)
    {
        if (is_null($customer_uin_doc_type)) {
            throw new \InvalidArgumentException('non-nullable customer_uin_doc_type cannot be null');
        }
        $this->container['customer_uin_doc_type'] = $customer_uin_doc_type;

        return $this;
    }

    /**
     * Gets domain_name_variants
     *
     * @return string[]|null
     */
    public function getDomainNameVariants()
    {
        return $this->container['domain_name_variants'];
    }

    /**
     * Sets domain_name_variants
     *
     * @param string[]|null $domain_name_variants domain_name_variants
     *
     * @return self
     */
    public function setDomainNameVariants($domain_name_variants)
    {
        if (is_null($domain_name_variants)) {
            throw new \InvalidArgumentException('non-nullable domain_name_variants cannot be null');
        }
        $this->container['domain_name_variants'] = $domain_name_variants;

        return $this;
    }

    /**
     * Gets intended_use
     *
     * @return string|null
     */
    public function getIntendedUse()
    {
        return $this->container['intended_use'];
    }

    /**
     * Sets intended_use
     *
     * @param string|null $intended_use intended_use
     *
     * @return self
     */
    public function setIntendedUse($intended_use)
    {
        if (is_null($intended_use)) {
            throw new \InvalidArgumentException('non-nullable intended_use cannot be null');
        }
        $this->container['intended_use'] = $intended_use;

        return $this;
    }

    /**
     * Gets law_acceptance
     *
     * @return string|null
     */
    public function getLawAcceptance()
    {
        return $this->container['law_acceptance'];
    }

    /**
     * Sets law_acceptance
     *
     * @param string|null $law_acceptance law_acceptance
     *
     * @return self
     */
    public function setLawAcceptance($law_acceptance)
    {
        if (is_null($law_acceptance)) {
            throw new \InvalidArgumentException('non-nullable law_acceptance cannot be null');
        }
        $this->container['law_acceptance'] = $law_acceptance;

        return $this;
    }

    /**
     * Gets maintainer
     *
     * @return string|null
     */
    public function getMaintainer()
    {
        return $this->container['maintainer'];
    }

    /**
     * Sets maintainer
     *
     * @param string|null $maintainer maintainer
     *
     * @return self
     */
    public function setMaintainer($maintainer)
    {
        if (is_null($maintainer)) {
            throw new \InvalidArgumentException('non-nullable maintainer cannot be null');
        }
        $this->container['maintainer'] = $maintainer;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return string|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param string|null $membership_id membership_id
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        if (is_null($membership_id)) {
            throw new \InvalidArgumentException('non-nullable membership_id cannot be null');
        }
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets mobile_phone_number_verification
     *
     * @return string|null
     */
    public function getMobilePhoneNumberVerification()
    {
        return $this->container['mobile_phone_number_verification'];
    }

    /**
     * Sets mobile_phone_number_verification
     *
     * @param string|null $mobile_phone_number_verification mobile_phone_number_verification
     *
     * @return self
     */
    public function setMobilePhoneNumberVerification($mobile_phone_number_verification)
    {
        if (is_null($mobile_phone_number_verification)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone_number_verification cannot be null');
        }
        $this->container['mobile_phone_number_verification'] = $mobile_phone_number_verification;

        return $this;
    }

    /**
     * Gets ngo_ong_eligibility_acceptance
     *
     * @return string|null
     */
    public function getNgoOngEligibilityAcceptance()
    {
        return $this->container['ngo_ong_eligibility_acceptance'];
    }

    /**
     * Sets ngo_ong_eligibility_acceptance
     *
     * @param string|null $ngo_ong_eligibility_acceptance ngo_ong_eligibility_acceptance
     *
     * @return self
     */
    public function setNgoOngEligibilityAcceptance($ngo_ong_eligibility_acceptance)
    {
        if (is_null($ngo_ong_eligibility_acceptance)) {
            throw new \InvalidArgumentException('non-nullable ngo_ong_eligibility_acceptance cannot be null');
        }
        $this->container['ngo_ong_eligibility_acceptance'] = $ngo_ong_eligibility_acceptance;

        return $this;
    }

    /**
     * Gets ngo_ong_policy_acceptance
     *
     * @return string|null
     */
    public function getNgoOngPolicyAcceptance()
    {
        return $this->container['ngo_ong_policy_acceptance'];
    }

    /**
     * Sets ngo_ong_policy_acceptance
     *
     * @param string|null $ngo_ong_policy_acceptance ngo_ong_policy_acceptance
     *
     * @return self
     */
    public function setNgoOngPolicyAcceptance($ngo_ong_policy_acceptance)
    {
        if (is_null($ngo_ong_policy_acceptance)) {
            throw new \InvalidArgumentException('non-nullable ngo_ong_policy_acceptance cannot be null');
        }
        $this->container['ngo_ong_policy_acceptance'] = $ngo_ong_policy_acceptance;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string|null
     */
    public function getPassportNumber()
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string|null $passport_number passport_number
     *
     * @return self
     */
    public function setPassportNumber($passport_number)
    {
        if (is_null($passport_number)) {
            throw new \InvalidArgumentException('non-nullable passport_number cannot be null');
        }
        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets verification_code
     *
     * @return string|null
     */
    public function getVerificationCode()
    {
        return $this->container['verification_code'];
    }

    /**
     * Sets verification_code
     *
     * @param string|null $verification_code verification_code
     *
     * @return self
     */
    public function setVerificationCode($verification_code)
    {
        if (is_null($verification_code)) {
            throw new \InvalidArgumentException('non-nullable verification_code cannot be null');
        }
        $this->container['verification_code'] = $verification_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


