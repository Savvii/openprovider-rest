<?php
/**
 * SettingsPaymentMethodLimit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * SettingsPaymentMethodLimit Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SettingsPaymentMethodLimit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'settingsPaymentMethodLimit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aud' => 'float',
        'bgn' => 'float',
        'brl' => 'float',
        'cad' => 'float',
        'chf' => 'float',
        'cny' => 'float',
        'czk' => 'float',
        'dkk' => 'float',
        'eek' => 'float',
        'eur' => 'float',
        'gbp' => 'float',
        'ghs' => 'float',
        'hkd' => 'float',
        'hrk' => 'float',
        'huf' => 'float',
        'idr' => 'float',
        'ils' => 'float',
        'inr' => 'float',
        'jpy' => 'float',
        'krw' => 'float',
        'lkr' => 'float',
        'ltl' => 'float',
        'lvl' => 'float',
        'mxn' => 'float',
        'myr' => 'float',
        'nok' => 'float',
        'nzd' => 'float',
        'php' => 'float',
        'pln' => 'float',
        'ron' => 'float',
        'rub' => 'float',
        'sek' => 'float',
        'sgd' => 'float',
        'thb' => 'float',
        'try' => 'float',
        'usd' => 'float',
        'zar' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aud' => 'double',
        'bgn' => 'double',
        'brl' => 'double',
        'cad' => 'double',
        'chf' => 'double',
        'cny' => 'double',
        'czk' => 'double',
        'dkk' => 'double',
        'eek' => 'double',
        'eur' => 'double',
        'gbp' => 'double',
        'ghs' => 'double',
        'hkd' => 'double',
        'hrk' => 'double',
        'huf' => 'double',
        'idr' => 'double',
        'ils' => 'double',
        'inr' => 'double',
        'jpy' => 'double',
        'krw' => 'double',
        'lkr' => 'double',
        'ltl' => 'double',
        'lvl' => 'double',
        'mxn' => 'double',
        'myr' => 'double',
        'nok' => 'double',
        'nzd' => 'double',
        'php' => 'double',
        'pln' => 'double',
        'ron' => 'double',
        'rub' => 'double',
        'sek' => 'double',
        'sgd' => 'double',
        'thb' => 'double',
        'try' => 'double',
        'usd' => 'double',
        'zar' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'aud' => false,
		'bgn' => false,
		'brl' => false,
		'cad' => false,
		'chf' => false,
		'cny' => false,
		'czk' => false,
		'dkk' => false,
		'eek' => false,
		'eur' => false,
		'gbp' => false,
		'ghs' => false,
		'hkd' => false,
		'hrk' => false,
		'huf' => false,
		'idr' => false,
		'ils' => false,
		'inr' => false,
		'jpy' => false,
		'krw' => false,
		'lkr' => false,
		'ltl' => false,
		'lvl' => false,
		'mxn' => false,
		'myr' => false,
		'nok' => false,
		'nzd' => false,
		'php' => false,
		'pln' => false,
		'ron' => false,
		'rub' => false,
		'sek' => false,
		'sgd' => false,
		'thb' => false,
		'try' => false,
		'usd' => false,
		'zar' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aud' => 'AUD',
        'bgn' => 'BGN',
        'brl' => 'BRL',
        'cad' => 'CAD',
        'chf' => 'CHF',
        'cny' => 'CNY',
        'czk' => 'CZK',
        'dkk' => 'DKK',
        'eek' => 'EEK',
        'eur' => 'EUR',
        'gbp' => 'GBP',
        'ghs' => 'GHS',
        'hkd' => 'HKD',
        'hrk' => 'HRK',
        'huf' => 'HUF',
        'idr' => 'IDR',
        'ils' => 'ILS',
        'inr' => 'INR',
        'jpy' => 'JPY',
        'krw' => 'KRW',
        'lkr' => 'LKR',
        'ltl' => 'LTL',
        'lvl' => 'LVL',
        'mxn' => 'MXN',
        'myr' => 'MYR',
        'nok' => 'NOK',
        'nzd' => 'NZD',
        'php' => 'PHP',
        'pln' => 'PLN',
        'ron' => 'RON',
        'rub' => 'RUB',
        'sek' => 'SEK',
        'sgd' => 'SGD',
        'thb' => 'THB',
        'try' => 'TRY',
        'usd' => 'USD',
        'zar' => 'ZAR'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aud' => 'setAud',
        'bgn' => 'setBgn',
        'brl' => 'setBrl',
        'cad' => 'setCad',
        'chf' => 'setChf',
        'cny' => 'setCny',
        'czk' => 'setCzk',
        'dkk' => 'setDkk',
        'eek' => 'setEek',
        'eur' => 'setEur',
        'gbp' => 'setGbp',
        'ghs' => 'setGhs',
        'hkd' => 'setHkd',
        'hrk' => 'setHrk',
        'huf' => 'setHuf',
        'idr' => 'setIdr',
        'ils' => 'setIls',
        'inr' => 'setInr',
        'jpy' => 'setJpy',
        'krw' => 'setKrw',
        'lkr' => 'setLkr',
        'ltl' => 'setLtl',
        'lvl' => 'setLvl',
        'mxn' => 'setMxn',
        'myr' => 'setMyr',
        'nok' => 'setNok',
        'nzd' => 'setNzd',
        'php' => 'setPhp',
        'pln' => 'setPln',
        'ron' => 'setRon',
        'rub' => 'setRub',
        'sek' => 'setSek',
        'sgd' => 'setSgd',
        'thb' => 'setThb',
        'try' => 'setTry',
        'usd' => 'setUsd',
        'zar' => 'setZar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aud' => 'getAud',
        'bgn' => 'getBgn',
        'brl' => 'getBrl',
        'cad' => 'getCad',
        'chf' => 'getChf',
        'cny' => 'getCny',
        'czk' => 'getCzk',
        'dkk' => 'getDkk',
        'eek' => 'getEek',
        'eur' => 'getEur',
        'gbp' => 'getGbp',
        'ghs' => 'getGhs',
        'hkd' => 'getHkd',
        'hrk' => 'getHrk',
        'huf' => 'getHuf',
        'idr' => 'getIdr',
        'ils' => 'getIls',
        'inr' => 'getInr',
        'jpy' => 'getJpy',
        'krw' => 'getKrw',
        'lkr' => 'getLkr',
        'ltl' => 'getLtl',
        'lvl' => 'getLvl',
        'mxn' => 'getMxn',
        'myr' => 'getMyr',
        'nok' => 'getNok',
        'nzd' => 'getNzd',
        'php' => 'getPhp',
        'pln' => 'getPln',
        'ron' => 'getRon',
        'rub' => 'getRub',
        'sek' => 'getSek',
        'sgd' => 'getSgd',
        'thb' => 'getThb',
        'try' => 'getTry',
        'usd' => 'getUsd',
        'zar' => 'getZar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('aud', $data ?? [], null);
        $this->setIfExists('bgn', $data ?? [], null);
        $this->setIfExists('brl', $data ?? [], null);
        $this->setIfExists('cad', $data ?? [], null);
        $this->setIfExists('chf', $data ?? [], null);
        $this->setIfExists('cny', $data ?? [], null);
        $this->setIfExists('czk', $data ?? [], null);
        $this->setIfExists('dkk', $data ?? [], null);
        $this->setIfExists('eek', $data ?? [], null);
        $this->setIfExists('eur', $data ?? [], null);
        $this->setIfExists('gbp', $data ?? [], null);
        $this->setIfExists('ghs', $data ?? [], null);
        $this->setIfExists('hkd', $data ?? [], null);
        $this->setIfExists('hrk', $data ?? [], null);
        $this->setIfExists('huf', $data ?? [], null);
        $this->setIfExists('idr', $data ?? [], null);
        $this->setIfExists('ils', $data ?? [], null);
        $this->setIfExists('inr', $data ?? [], null);
        $this->setIfExists('jpy', $data ?? [], null);
        $this->setIfExists('krw', $data ?? [], null);
        $this->setIfExists('lkr', $data ?? [], null);
        $this->setIfExists('ltl', $data ?? [], null);
        $this->setIfExists('lvl', $data ?? [], null);
        $this->setIfExists('mxn', $data ?? [], null);
        $this->setIfExists('myr', $data ?? [], null);
        $this->setIfExists('nok', $data ?? [], null);
        $this->setIfExists('nzd', $data ?? [], null);
        $this->setIfExists('php', $data ?? [], null);
        $this->setIfExists('pln', $data ?? [], null);
        $this->setIfExists('ron', $data ?? [], null);
        $this->setIfExists('rub', $data ?? [], null);
        $this->setIfExists('sek', $data ?? [], null);
        $this->setIfExists('sgd', $data ?? [], null);
        $this->setIfExists('thb', $data ?? [], null);
        $this->setIfExists('try', $data ?? [], null);
        $this->setIfExists('usd', $data ?? [], null);
        $this->setIfExists('zar', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aud
     *
     * @return float|null
     */
    public function getAud()
    {
        return $this->container['aud'];
    }

    /**
     * Sets aud
     *
     * @param float|null $aud aud
     *
     * @return self
     */
    public function setAud($aud)
    {
        if (is_null($aud)) {
            throw new \InvalidArgumentException('non-nullable aud cannot be null');
        }
        $this->container['aud'] = $aud;

        return $this;
    }

    /**
     * Gets bgn
     *
     * @return float|null
     */
    public function getBgn()
    {
        return $this->container['bgn'];
    }

    /**
     * Sets bgn
     *
     * @param float|null $bgn bgn
     *
     * @return self
     */
    public function setBgn($bgn)
    {
        if (is_null($bgn)) {
            throw new \InvalidArgumentException('non-nullable bgn cannot be null');
        }
        $this->container['bgn'] = $bgn;

        return $this;
    }

    /**
     * Gets brl
     *
     * @return float|null
     */
    public function getBrl()
    {
        return $this->container['brl'];
    }

    /**
     * Sets brl
     *
     * @param float|null $brl brl
     *
     * @return self
     */
    public function setBrl($brl)
    {
        if (is_null($brl)) {
            throw new \InvalidArgumentException('non-nullable brl cannot be null');
        }
        $this->container['brl'] = $brl;

        return $this;
    }

    /**
     * Gets cad
     *
     * @return float|null
     */
    public function getCad()
    {
        return $this->container['cad'];
    }

    /**
     * Sets cad
     *
     * @param float|null $cad cad
     *
     * @return self
     */
    public function setCad($cad)
    {
        if (is_null($cad)) {
            throw new \InvalidArgumentException('non-nullable cad cannot be null');
        }
        $this->container['cad'] = $cad;

        return $this;
    }

    /**
     * Gets chf
     *
     * @return float|null
     */
    public function getChf()
    {
        return $this->container['chf'];
    }

    /**
     * Sets chf
     *
     * @param float|null $chf chf
     *
     * @return self
     */
    public function setChf($chf)
    {
        if (is_null($chf)) {
            throw new \InvalidArgumentException('non-nullable chf cannot be null');
        }
        $this->container['chf'] = $chf;

        return $this;
    }

    /**
     * Gets cny
     *
     * @return float|null
     */
    public function getCny()
    {
        return $this->container['cny'];
    }

    /**
     * Sets cny
     *
     * @param float|null $cny cny
     *
     * @return self
     */
    public function setCny($cny)
    {
        if (is_null($cny)) {
            throw new \InvalidArgumentException('non-nullable cny cannot be null');
        }
        $this->container['cny'] = $cny;

        return $this;
    }

    /**
     * Gets czk
     *
     * @return float|null
     */
    public function getCzk()
    {
        return $this->container['czk'];
    }

    /**
     * Sets czk
     *
     * @param float|null $czk czk
     *
     * @return self
     */
    public function setCzk($czk)
    {
        if (is_null($czk)) {
            throw new \InvalidArgumentException('non-nullable czk cannot be null');
        }
        $this->container['czk'] = $czk;

        return $this;
    }

    /**
     * Gets dkk
     *
     * @return float|null
     */
    public function getDkk()
    {
        return $this->container['dkk'];
    }

    /**
     * Sets dkk
     *
     * @param float|null $dkk dkk
     *
     * @return self
     */
    public function setDkk($dkk)
    {
        if (is_null($dkk)) {
            throw new \InvalidArgumentException('non-nullable dkk cannot be null');
        }
        $this->container['dkk'] = $dkk;

        return $this;
    }

    /**
     * Gets eek
     *
     * @return float|null
     */
    public function getEek()
    {
        return $this->container['eek'];
    }

    /**
     * Sets eek
     *
     * @param float|null $eek eek
     *
     * @return self
     */
    public function setEek($eek)
    {
        if (is_null($eek)) {
            throw new \InvalidArgumentException('non-nullable eek cannot be null');
        }
        $this->container['eek'] = $eek;

        return $this;
    }

    /**
     * Gets eur
     *
     * @return float|null
     */
    public function getEur()
    {
        return $this->container['eur'];
    }

    /**
     * Sets eur
     *
     * @param float|null $eur eur
     *
     * @return self
     */
    public function setEur($eur)
    {
        if (is_null($eur)) {
            throw new \InvalidArgumentException('non-nullable eur cannot be null');
        }
        $this->container['eur'] = $eur;

        return $this;
    }

    /**
     * Gets gbp
     *
     * @return float|null
     */
    public function getGbp()
    {
        return $this->container['gbp'];
    }

    /**
     * Sets gbp
     *
     * @param float|null $gbp gbp
     *
     * @return self
     */
    public function setGbp($gbp)
    {
        if (is_null($gbp)) {
            throw new \InvalidArgumentException('non-nullable gbp cannot be null');
        }
        $this->container['gbp'] = $gbp;

        return $this;
    }

    /**
     * Gets ghs
     *
     * @return float|null
     */
    public function getGhs()
    {
        return $this->container['ghs'];
    }

    /**
     * Sets ghs
     *
     * @param float|null $ghs ghs
     *
     * @return self
     */
    public function setGhs($ghs)
    {
        if (is_null($ghs)) {
            throw new \InvalidArgumentException('non-nullable ghs cannot be null');
        }
        $this->container['ghs'] = $ghs;

        return $this;
    }

    /**
     * Gets hkd
     *
     * @return float|null
     */
    public function getHkd()
    {
        return $this->container['hkd'];
    }

    /**
     * Sets hkd
     *
     * @param float|null $hkd hkd
     *
     * @return self
     */
    public function setHkd($hkd)
    {
        if (is_null($hkd)) {
            throw new \InvalidArgumentException('non-nullable hkd cannot be null');
        }
        $this->container['hkd'] = $hkd;

        return $this;
    }

    /**
     * Gets hrk
     *
     * @return float|null
     */
    public function getHrk()
    {
        return $this->container['hrk'];
    }

    /**
     * Sets hrk
     *
     * @param float|null $hrk hrk
     *
     * @return self
     */
    public function setHrk($hrk)
    {
        if (is_null($hrk)) {
            throw new \InvalidArgumentException('non-nullable hrk cannot be null');
        }
        $this->container['hrk'] = $hrk;

        return $this;
    }

    /**
     * Gets huf
     *
     * @return float|null
     */
    public function getHuf()
    {
        return $this->container['huf'];
    }

    /**
     * Sets huf
     *
     * @param float|null $huf huf
     *
     * @return self
     */
    public function setHuf($huf)
    {
        if (is_null($huf)) {
            throw new \InvalidArgumentException('non-nullable huf cannot be null');
        }
        $this->container['huf'] = $huf;

        return $this;
    }

    /**
     * Gets idr
     *
     * @return float|null
     */
    public function getIdr()
    {
        return $this->container['idr'];
    }

    /**
     * Sets idr
     *
     * @param float|null $idr idr
     *
     * @return self
     */
    public function setIdr($idr)
    {
        if (is_null($idr)) {
            throw new \InvalidArgumentException('non-nullable idr cannot be null');
        }
        $this->container['idr'] = $idr;

        return $this;
    }

    /**
     * Gets ils
     *
     * @return float|null
     */
    public function getIls()
    {
        return $this->container['ils'];
    }

    /**
     * Sets ils
     *
     * @param float|null $ils ils
     *
     * @return self
     */
    public function setIls($ils)
    {
        if (is_null($ils)) {
            throw new \InvalidArgumentException('non-nullable ils cannot be null');
        }
        $this->container['ils'] = $ils;

        return $this;
    }

    /**
     * Gets inr
     *
     * @return float|null
     */
    public function getInr()
    {
        return $this->container['inr'];
    }

    /**
     * Sets inr
     *
     * @param float|null $inr inr
     *
     * @return self
     */
    public function setInr($inr)
    {
        if (is_null($inr)) {
            throw new \InvalidArgumentException('non-nullable inr cannot be null');
        }
        $this->container['inr'] = $inr;

        return $this;
    }

    /**
     * Gets jpy
     *
     * @return float|null
     */
    public function getJpy()
    {
        return $this->container['jpy'];
    }

    /**
     * Sets jpy
     *
     * @param float|null $jpy jpy
     *
     * @return self
     */
    public function setJpy($jpy)
    {
        if (is_null($jpy)) {
            throw new \InvalidArgumentException('non-nullable jpy cannot be null');
        }
        $this->container['jpy'] = $jpy;

        return $this;
    }

    /**
     * Gets krw
     *
     * @return float|null
     */
    public function getKrw()
    {
        return $this->container['krw'];
    }

    /**
     * Sets krw
     *
     * @param float|null $krw krw
     *
     * @return self
     */
    public function setKrw($krw)
    {
        if (is_null($krw)) {
            throw new \InvalidArgumentException('non-nullable krw cannot be null');
        }
        $this->container['krw'] = $krw;

        return $this;
    }

    /**
     * Gets lkr
     *
     * @return float|null
     */
    public function getLkr()
    {
        return $this->container['lkr'];
    }

    /**
     * Sets lkr
     *
     * @param float|null $lkr lkr
     *
     * @return self
     */
    public function setLkr($lkr)
    {
        if (is_null($lkr)) {
            throw new \InvalidArgumentException('non-nullable lkr cannot be null');
        }
        $this->container['lkr'] = $lkr;

        return $this;
    }

    /**
     * Gets ltl
     *
     * @return float|null
     */
    public function getLtl()
    {
        return $this->container['ltl'];
    }

    /**
     * Sets ltl
     *
     * @param float|null $ltl ltl
     *
     * @return self
     */
    public function setLtl($ltl)
    {
        if (is_null($ltl)) {
            throw new \InvalidArgumentException('non-nullable ltl cannot be null');
        }
        $this->container['ltl'] = $ltl;

        return $this;
    }

    /**
     * Gets lvl
     *
     * @return float|null
     */
    public function getLvl()
    {
        return $this->container['lvl'];
    }

    /**
     * Sets lvl
     *
     * @param float|null $lvl lvl
     *
     * @return self
     */
    public function setLvl($lvl)
    {
        if (is_null($lvl)) {
            throw new \InvalidArgumentException('non-nullable lvl cannot be null');
        }
        $this->container['lvl'] = $lvl;

        return $this;
    }

    /**
     * Gets mxn
     *
     * @return float|null
     */
    public function getMxn()
    {
        return $this->container['mxn'];
    }

    /**
     * Sets mxn
     *
     * @param float|null $mxn mxn
     *
     * @return self
     */
    public function setMxn($mxn)
    {
        if (is_null($mxn)) {
            throw new \InvalidArgumentException('non-nullable mxn cannot be null');
        }
        $this->container['mxn'] = $mxn;

        return $this;
    }

    /**
     * Gets myr
     *
     * @return float|null
     */
    public function getMyr()
    {
        return $this->container['myr'];
    }

    /**
     * Sets myr
     *
     * @param float|null $myr myr
     *
     * @return self
     */
    public function setMyr($myr)
    {
        if (is_null($myr)) {
            throw new \InvalidArgumentException('non-nullable myr cannot be null');
        }
        $this->container['myr'] = $myr;

        return $this;
    }

    /**
     * Gets nok
     *
     * @return float|null
     */
    public function getNok()
    {
        return $this->container['nok'];
    }

    /**
     * Sets nok
     *
     * @param float|null $nok nok
     *
     * @return self
     */
    public function setNok($nok)
    {
        if (is_null($nok)) {
            throw new \InvalidArgumentException('non-nullable nok cannot be null');
        }
        $this->container['nok'] = $nok;

        return $this;
    }

    /**
     * Gets nzd
     *
     * @return float|null
     */
    public function getNzd()
    {
        return $this->container['nzd'];
    }

    /**
     * Sets nzd
     *
     * @param float|null $nzd nzd
     *
     * @return self
     */
    public function setNzd($nzd)
    {
        if (is_null($nzd)) {
            throw new \InvalidArgumentException('non-nullable nzd cannot be null');
        }
        $this->container['nzd'] = $nzd;

        return $this;
    }

    /**
     * Gets php
     *
     * @return float|null
     */
    public function getPhp()
    {
        return $this->container['php'];
    }

    /**
     * Sets php
     *
     * @param float|null $php php
     *
     * @return self
     */
    public function setPhp($php)
    {
        if (is_null($php)) {
            throw new \InvalidArgumentException('non-nullable php cannot be null');
        }
        $this->container['php'] = $php;

        return $this;
    }

    /**
     * Gets pln
     *
     * @return float|null
     */
    public function getPln()
    {
        return $this->container['pln'];
    }

    /**
     * Sets pln
     *
     * @param float|null $pln pln
     *
     * @return self
     */
    public function setPln($pln)
    {
        if (is_null($pln)) {
            throw new \InvalidArgumentException('non-nullable pln cannot be null');
        }
        $this->container['pln'] = $pln;

        return $this;
    }

    /**
     * Gets ron
     *
     * @return float|null
     */
    public function getRon()
    {
        return $this->container['ron'];
    }

    /**
     * Sets ron
     *
     * @param float|null $ron ron
     *
     * @return self
     */
    public function setRon($ron)
    {
        if (is_null($ron)) {
            throw new \InvalidArgumentException('non-nullable ron cannot be null');
        }
        $this->container['ron'] = $ron;

        return $this;
    }

    /**
     * Gets rub
     *
     * @return float|null
     */
    public function getRub()
    {
        return $this->container['rub'];
    }

    /**
     * Sets rub
     *
     * @param float|null $rub rub
     *
     * @return self
     */
    public function setRub($rub)
    {
        if (is_null($rub)) {
            throw new \InvalidArgumentException('non-nullable rub cannot be null');
        }
        $this->container['rub'] = $rub;

        return $this;
    }

    /**
     * Gets sek
     *
     * @return float|null
     */
    public function getSek()
    {
        return $this->container['sek'];
    }

    /**
     * Sets sek
     *
     * @param float|null $sek sek
     *
     * @return self
     */
    public function setSek($sek)
    {
        if (is_null($sek)) {
            throw new \InvalidArgumentException('non-nullable sek cannot be null');
        }
        $this->container['sek'] = $sek;

        return $this;
    }

    /**
     * Gets sgd
     *
     * @return float|null
     */
    public function getSgd()
    {
        return $this->container['sgd'];
    }

    /**
     * Sets sgd
     *
     * @param float|null $sgd sgd
     *
     * @return self
     */
    public function setSgd($sgd)
    {
        if (is_null($sgd)) {
            throw new \InvalidArgumentException('non-nullable sgd cannot be null');
        }
        $this->container['sgd'] = $sgd;

        return $this;
    }

    /**
     * Gets thb
     *
     * @return float|null
     */
    public function getThb()
    {
        return $this->container['thb'];
    }

    /**
     * Sets thb
     *
     * @param float|null $thb thb
     *
     * @return self
     */
    public function setThb($thb)
    {
        if (is_null($thb)) {
            throw new \InvalidArgumentException('non-nullable thb cannot be null');
        }
        $this->container['thb'] = $thb;

        return $this;
    }

    /**
     * Gets try
     *
     * @return float|null
     */
    public function getTry()
    {
        return $this->container['try'];
    }

    /**
     * Sets try
     *
     * @param float|null $try try
     *
     * @return self
     */
    public function setTry($try)
    {
        if (is_null($try)) {
            throw new \InvalidArgumentException('non-nullable try cannot be null');
        }
        $this->container['try'] = $try;

        return $this;
    }

    /**
     * Gets usd
     *
     * @return float|null
     */
    public function getUsd()
    {
        return $this->container['usd'];
    }

    /**
     * Sets usd
     *
     * @param float|null $usd usd
     *
     * @return self
     */
    public function setUsd($usd)
    {
        if (is_null($usd)) {
            throw new \InvalidArgumentException('non-nullable usd cannot be null');
        }
        $this->container['usd'] = $usd;

        return $this;
    }

    /**
     * Gets zar
     *
     * @return float|null
     */
    public function getZar()
    {
        return $this->container['zar'];
    }

    /**
     * Sets zar
     *
     * @param float|null $zar zar
     *
     * @return self
     */
    public function setZar($zar)
    {
        if (is_null($zar)) {
            throw new \InvalidArgumentException('non-nullable zar cannot be null');
        }
        $this->container['zar'] = $zar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


