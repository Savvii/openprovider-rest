<?php
/**
 * OrderEasyDmarcOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * OrderEasyDmarcOrder Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderEasyDmarcOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderEasyDmarcOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activated_at' => 'string',
        'domain' => '\Savvii\OpenproviderRest\Model\OrderDomain',
        'easydmarc_email_address' => 'string',
        'expired_at' => 'string',
        'id' => 'int',
        'recent_easydmarc_action' => '\Savvii\OpenproviderRest\Model\OrderRecentEasyDmarcAction',
        'record_host' => 'string',
        'record_type' => 'string',
        'record_value' => 'string',
        'renew_at' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activated_at' => null,
        'domain' => null,
        'easydmarc_email_address' => null,
        'expired_at' => null,
        'id' => 'int32',
        'recent_easydmarc_action' => null,
        'record_host' => null,
        'record_type' => null,
        'record_value' => null,
        'renew_at' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activated_at' => false,
		'domain' => false,
		'easydmarc_email_address' => false,
		'expired_at' => false,
		'id' => false,
		'recent_easydmarc_action' => false,
		'record_host' => false,
		'record_type' => false,
		'record_value' => false,
		'renew_at' => false,
		'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activated_at' => 'activated_at',
        'domain' => 'domain',
        'easydmarc_email_address' => 'easydmarc_email_address',
        'expired_at' => 'expired_at',
        'id' => 'id',
        'recent_easydmarc_action' => 'recent_easydmarc_action',
        'record_host' => 'record_host',
        'record_type' => 'record_type',
        'record_value' => 'record_value',
        'renew_at' => 'renew_at',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activated_at' => 'setActivatedAt',
        'domain' => 'setDomain',
        'easydmarc_email_address' => 'setEasydmarcEmailAddress',
        'expired_at' => 'setExpiredAt',
        'id' => 'setId',
        'recent_easydmarc_action' => 'setRecentEasydmarcAction',
        'record_host' => 'setRecordHost',
        'record_type' => 'setRecordType',
        'record_value' => 'setRecordValue',
        'renew_at' => 'setRenewAt',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activated_at' => 'getActivatedAt',
        'domain' => 'getDomain',
        'easydmarc_email_address' => 'getEasydmarcEmailAddress',
        'expired_at' => 'getExpiredAt',
        'id' => 'getId',
        'recent_easydmarc_action' => 'getRecentEasydmarcAction',
        'record_host' => 'getRecordHost',
        'record_type' => 'getRecordType',
        'record_value' => 'getRecordValue',
        'renew_at' => 'getRenewAt',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activated_at', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('easydmarc_email_address', $data ?? [], null);
        $this->setIfExists('expired_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('recent_easydmarc_action', $data ?? [], null);
        $this->setIfExists('record_host', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('record_value', $data ?? [], null);
        $this->setIfExists('renew_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activated_at
     *
     * @return string|null
     */
    public function getActivatedAt()
    {
        return $this->container['activated_at'];
    }

    /**
     * Sets activated_at
     *
     * @param string|null $activated_at activated_at
     *
     * @return self
     */
    public function setActivatedAt($activated_at)
    {
        if (is_null($activated_at)) {
            throw new \InvalidArgumentException('non-nullable activated_at cannot be null');
        }
        $this->container['activated_at'] = $activated_at;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return \Savvii\OpenproviderRest\Model\OrderDomain|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param \Savvii\OpenproviderRest\Model\OrderDomain|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets easydmarc_email_address
     *
     * @return string|null
     */
    public function getEasydmarcEmailAddress()
    {
        return $this->container['easydmarc_email_address'];
    }

    /**
     * Sets easydmarc_email_address
     *
     * @param string|null $easydmarc_email_address easydmarc_email_address
     *
     * @return self
     */
    public function setEasydmarcEmailAddress($easydmarc_email_address)
    {
        if (is_null($easydmarc_email_address)) {
            throw new \InvalidArgumentException('non-nullable easydmarc_email_address cannot be null');
        }
        $this->container['easydmarc_email_address'] = $easydmarc_email_address;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return string|null
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param string|null $expired_at expired_at
     *
     * @return self
     */
    public function setExpiredAt($expired_at)
    {
        if (is_null($expired_at)) {
            throw new \InvalidArgumentException('non-nullable expired_at cannot be null');
        }
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets recent_easydmarc_action
     *
     * @return \Savvii\OpenproviderRest\Model\OrderRecentEasyDmarcAction|null
     */
    public function getRecentEasydmarcAction()
    {
        return $this->container['recent_easydmarc_action'];
    }

    /**
     * Sets recent_easydmarc_action
     *
     * @param \Savvii\OpenproviderRest\Model\OrderRecentEasyDmarcAction|null $recent_easydmarc_action recent_easydmarc_action
     *
     * @return self
     */
    public function setRecentEasydmarcAction($recent_easydmarc_action)
    {
        if (is_null($recent_easydmarc_action)) {
            throw new \InvalidArgumentException('non-nullable recent_easydmarc_action cannot be null');
        }
        $this->container['recent_easydmarc_action'] = $recent_easydmarc_action;

        return $this;
    }

    /**
     * Gets record_host
     *
     * @return string|null
     */
    public function getRecordHost()
    {
        return $this->container['record_host'];
    }

    /**
     * Sets record_host
     *
     * @param string|null $record_host record_host
     *
     * @return self
     */
    public function setRecordHost($record_host)
    {
        if (is_null($record_host)) {
            throw new \InvalidArgumentException('non-nullable record_host cannot be null');
        }
        $this->container['record_host'] = $record_host;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type record_type
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets record_value
     *
     * @return string|null
     */
    public function getRecordValue()
    {
        return $this->container['record_value'];
    }

    /**
     * Sets record_value
     *
     * @param string|null $record_value record_value
     *
     * @return self
     */
    public function setRecordValue($record_value)
    {
        if (is_null($record_value)) {
            throw new \InvalidArgumentException('non-nullable record_value cannot be null');
        }
        $this->container['record_value'] = $record_value;

        return $this;
    }

    /**
     * Gets renew_at
     *
     * @return string|null
     */
    public function getRenewAt()
    {
        return $this->container['renew_at'];
    }

    /**
     * Sets renew_at
     *
     * @param string|null $renew_at renew_at
     *
     * @return self
     */
    public function setRenewAt($renew_at)
    {
        if (is_null($renew_at)) {
            throw new \InvalidArgumentException('non-nullable renew_at cannot be null');
        }
        $this->container['renew_at'] = $renew_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


