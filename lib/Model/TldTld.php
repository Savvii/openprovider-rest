<?php
/**
 * TldTld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * TldTld Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TldTld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tldTld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'admin_handle_supported' => 'bool',
        'billing_handle_enabled' => 'bool',
        'billing_handle_supported' => 'bool',
        'description' => '\Savvii\OpenproviderRest\Model\TldDescription',
        'dnssec_algorithms' => 'int[]',
        'dnssec_allowed' => 'bool',
        'dnssec_digests_allowed' => 'bool',
        'dnssec_keys_allowed' => 'bool',
        'dnssec_max_records_amount' => 'int',
        'domicile_available' => 'bool',
        'is_auth_code_available' => 'bool',
        'is_auth_code_changeable' => 'bool',
        'is_auth_code_requested' => 'bool',
        'is_private_whois_allowed' => 'bool',
        'is_trade_auth_code_required' => 'bool',
        'is_transfer_auth_code_required' => 'bool',
        'level_prices' => '\Savvii\OpenproviderRest\Model\TldLevelPrice[]',
        'max_period' => 'int',
        'min_period' => 'int',
        'name' => 'string',
        'owner_handle_supported' => 'bool',
        'prices' => '\Savvii\OpenproviderRest\Model\TldPrices',
        'quarantine_period' => 'int',
        'renew_available' => 'bool',
        'reseller_handle_enabled' => 'bool',
        'reseller_handle_supported' => 'bool',
        'restrictions' => 'string[]',
        'soft_quarantine_period' => 'int',
        'status' => 'string',
        'supported_application_mode' => '\Savvii\OpenproviderRest\Model\TldApplicationMode[]',
        'supported_idn_scripts' => '\Savvii\OpenproviderRest\Model\TldIdnScript[]',
        'tech_handle_supported' => 'bool',
        'trade_available' => 'bool',
        'transfer_available' => 'bool',
        'usage_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'admin_handle_supported' => 'boolean',
        'billing_handle_enabled' => 'boolean',
        'billing_handle_supported' => 'boolean',
        'description' => null,
        'dnssec_algorithms' => 'int32',
        'dnssec_allowed' => 'boolean',
        'dnssec_digests_allowed' => 'boolean',
        'dnssec_keys_allowed' => 'boolean',
        'dnssec_max_records_amount' => 'int32',
        'domicile_available' => 'boolean',
        'is_auth_code_available' => 'boolean',
        'is_auth_code_changeable' => 'boolean',
        'is_auth_code_requested' => 'boolean',
        'is_private_whois_allowed' => 'boolean',
        'is_trade_auth_code_required' => 'boolean',
        'is_transfer_auth_code_required' => 'boolean',
        'level_prices' => null,
        'max_period' => 'int32',
        'min_period' => 'int32',
        'name' => null,
        'owner_handle_supported' => 'boolean',
        'prices' => null,
        'quarantine_period' => 'int32',
        'renew_available' => 'boolean',
        'reseller_handle_enabled' => 'boolean',
        'reseller_handle_supported' => 'boolean',
        'restrictions' => null,
        'soft_quarantine_period' => 'int32',
        'status' => null,
        'supported_application_mode' => null,
        'supported_idn_scripts' => null,
        'tech_handle_supported' => 'boolean',
        'trade_available' => 'boolean',
        'transfer_available' => 'boolean',
        'usage_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'admin_handle_supported' => false,
		'billing_handle_enabled' => false,
		'billing_handle_supported' => false,
		'description' => false,
		'dnssec_algorithms' => false,
		'dnssec_allowed' => false,
		'dnssec_digests_allowed' => false,
		'dnssec_keys_allowed' => false,
		'dnssec_max_records_amount' => false,
		'domicile_available' => false,
		'is_auth_code_available' => false,
		'is_auth_code_changeable' => false,
		'is_auth_code_requested' => false,
		'is_private_whois_allowed' => false,
		'is_trade_auth_code_required' => false,
		'is_transfer_auth_code_required' => false,
		'level_prices' => false,
		'max_period' => false,
		'min_period' => false,
		'name' => false,
		'owner_handle_supported' => false,
		'prices' => false,
		'quarantine_period' => false,
		'renew_available' => false,
		'reseller_handle_enabled' => false,
		'reseller_handle_supported' => false,
		'restrictions' => false,
		'soft_quarantine_period' => false,
		'status' => false,
		'supported_application_mode' => false,
		'supported_idn_scripts' => false,
		'tech_handle_supported' => false,
		'trade_available' => false,
		'transfer_available' => false,
		'usage_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_handle_supported' => 'admin_handle_supported',
        'billing_handle_enabled' => 'billing_handle_enabled',
        'billing_handle_supported' => 'billing_handle_supported',
        'description' => 'description',
        'dnssec_algorithms' => 'dnssec_algorithms',
        'dnssec_allowed' => 'dnssec_allowed',
        'dnssec_digests_allowed' => 'dnssec_digests_allowed',
        'dnssec_keys_allowed' => 'dnssec_keys_allowed',
        'dnssec_max_records_amount' => 'dnssec_max_records_amount',
        'domicile_available' => 'domicile_available',
        'is_auth_code_available' => 'is_auth_code_available',
        'is_auth_code_changeable' => 'is_auth_code_changeable',
        'is_auth_code_requested' => 'is_auth_code_requested',
        'is_private_whois_allowed' => 'is_private_whois_allowed',
        'is_trade_auth_code_required' => 'is_trade_auth_code_required',
        'is_transfer_auth_code_required' => 'is_transfer_auth_code_required',
        'level_prices' => 'level_prices',
        'max_period' => 'max_period',
        'min_period' => 'min_period',
        'name' => 'name',
        'owner_handle_supported' => 'owner_handle_supported',
        'prices' => 'prices',
        'quarantine_period' => 'quarantine_period',
        'renew_available' => 'renew_available',
        'reseller_handle_enabled' => 'reseller_handle_enabled',
        'reseller_handle_supported' => 'reseller_handle_supported',
        'restrictions' => 'restrictions',
        'soft_quarantine_period' => 'soft_quarantine_period',
        'status' => 'status',
        'supported_application_mode' => 'supported_application_mode',
        'supported_idn_scripts' => 'supported_idn_scripts',
        'tech_handle_supported' => 'tech_handle_supported',
        'trade_available' => 'trade_available',
        'transfer_available' => 'transfer_available',
        'usage_count' => 'usage_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_handle_supported' => 'setAdminHandleSupported',
        'billing_handle_enabled' => 'setBillingHandleEnabled',
        'billing_handle_supported' => 'setBillingHandleSupported',
        'description' => 'setDescription',
        'dnssec_algorithms' => 'setDnssecAlgorithms',
        'dnssec_allowed' => 'setDnssecAllowed',
        'dnssec_digests_allowed' => 'setDnssecDigestsAllowed',
        'dnssec_keys_allowed' => 'setDnssecKeysAllowed',
        'dnssec_max_records_amount' => 'setDnssecMaxRecordsAmount',
        'domicile_available' => 'setDomicileAvailable',
        'is_auth_code_available' => 'setIsAuthCodeAvailable',
        'is_auth_code_changeable' => 'setIsAuthCodeChangeable',
        'is_auth_code_requested' => 'setIsAuthCodeRequested',
        'is_private_whois_allowed' => 'setIsPrivateWhoisAllowed',
        'is_trade_auth_code_required' => 'setIsTradeAuthCodeRequired',
        'is_transfer_auth_code_required' => 'setIsTransferAuthCodeRequired',
        'level_prices' => 'setLevelPrices',
        'max_period' => 'setMaxPeriod',
        'min_period' => 'setMinPeriod',
        'name' => 'setName',
        'owner_handle_supported' => 'setOwnerHandleSupported',
        'prices' => 'setPrices',
        'quarantine_period' => 'setQuarantinePeriod',
        'renew_available' => 'setRenewAvailable',
        'reseller_handle_enabled' => 'setResellerHandleEnabled',
        'reseller_handle_supported' => 'setResellerHandleSupported',
        'restrictions' => 'setRestrictions',
        'soft_quarantine_period' => 'setSoftQuarantinePeriod',
        'status' => 'setStatus',
        'supported_application_mode' => 'setSupportedApplicationMode',
        'supported_idn_scripts' => 'setSupportedIdnScripts',
        'tech_handle_supported' => 'setTechHandleSupported',
        'trade_available' => 'setTradeAvailable',
        'transfer_available' => 'setTransferAvailable',
        'usage_count' => 'setUsageCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_handle_supported' => 'getAdminHandleSupported',
        'billing_handle_enabled' => 'getBillingHandleEnabled',
        'billing_handle_supported' => 'getBillingHandleSupported',
        'description' => 'getDescription',
        'dnssec_algorithms' => 'getDnssecAlgorithms',
        'dnssec_allowed' => 'getDnssecAllowed',
        'dnssec_digests_allowed' => 'getDnssecDigestsAllowed',
        'dnssec_keys_allowed' => 'getDnssecKeysAllowed',
        'dnssec_max_records_amount' => 'getDnssecMaxRecordsAmount',
        'domicile_available' => 'getDomicileAvailable',
        'is_auth_code_available' => 'getIsAuthCodeAvailable',
        'is_auth_code_changeable' => 'getIsAuthCodeChangeable',
        'is_auth_code_requested' => 'getIsAuthCodeRequested',
        'is_private_whois_allowed' => 'getIsPrivateWhoisAllowed',
        'is_trade_auth_code_required' => 'getIsTradeAuthCodeRequired',
        'is_transfer_auth_code_required' => 'getIsTransferAuthCodeRequired',
        'level_prices' => 'getLevelPrices',
        'max_period' => 'getMaxPeriod',
        'min_period' => 'getMinPeriod',
        'name' => 'getName',
        'owner_handle_supported' => 'getOwnerHandleSupported',
        'prices' => 'getPrices',
        'quarantine_period' => 'getQuarantinePeriod',
        'renew_available' => 'getRenewAvailable',
        'reseller_handle_enabled' => 'getResellerHandleEnabled',
        'reseller_handle_supported' => 'getResellerHandleSupported',
        'restrictions' => 'getRestrictions',
        'soft_quarantine_period' => 'getSoftQuarantinePeriod',
        'status' => 'getStatus',
        'supported_application_mode' => 'getSupportedApplicationMode',
        'supported_idn_scripts' => 'getSupportedIdnScripts',
        'tech_handle_supported' => 'getTechHandleSupported',
        'trade_available' => 'getTradeAvailable',
        'transfer_available' => 'getTransferAvailable',
        'usage_count' => 'getUsageCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('admin_handle_supported', $data ?? [], null);
        $this->setIfExists('billing_handle_enabled', $data ?? [], null);
        $this->setIfExists('billing_handle_supported', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('dnssec_algorithms', $data ?? [], null);
        $this->setIfExists('dnssec_allowed', $data ?? [], null);
        $this->setIfExists('dnssec_digests_allowed', $data ?? [], null);
        $this->setIfExists('dnssec_keys_allowed', $data ?? [], null);
        $this->setIfExists('dnssec_max_records_amount', $data ?? [], null);
        $this->setIfExists('domicile_available', $data ?? [], null);
        $this->setIfExists('is_auth_code_available', $data ?? [], null);
        $this->setIfExists('is_auth_code_changeable', $data ?? [], null);
        $this->setIfExists('is_auth_code_requested', $data ?? [], null);
        $this->setIfExists('is_private_whois_allowed', $data ?? [], null);
        $this->setIfExists('is_trade_auth_code_required', $data ?? [], null);
        $this->setIfExists('is_transfer_auth_code_required', $data ?? [], null);
        $this->setIfExists('level_prices', $data ?? [], null);
        $this->setIfExists('max_period', $data ?? [], null);
        $this->setIfExists('min_period', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('owner_handle_supported', $data ?? [], null);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('quarantine_period', $data ?? [], null);
        $this->setIfExists('renew_available', $data ?? [], null);
        $this->setIfExists('reseller_handle_enabled', $data ?? [], null);
        $this->setIfExists('reseller_handle_supported', $data ?? [], null);
        $this->setIfExists('restrictions', $data ?? [], null);
        $this->setIfExists('soft_quarantine_period', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('supported_application_mode', $data ?? [], null);
        $this->setIfExists('supported_idn_scripts', $data ?? [], null);
        $this->setIfExists('tech_handle_supported', $data ?? [], null);
        $this->setIfExists('trade_available', $data ?? [], null);
        $this->setIfExists('transfer_available', $data ?? [], null);
        $this->setIfExists('usage_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_handle_supported
     *
     * @return bool|null
     */
    public function getAdminHandleSupported()
    {
        return $this->container['admin_handle_supported'];
    }

    /**
     * Sets admin_handle_supported
     *
     * @param bool|null $admin_handle_supported admin_handle_supported
     *
     * @return self
     */
    public function setAdminHandleSupported($admin_handle_supported)
    {
        if (is_null($admin_handle_supported)) {
            throw new \InvalidArgumentException('non-nullable admin_handle_supported cannot be null');
        }
        $this->container['admin_handle_supported'] = $admin_handle_supported;

        return $this;
    }

    /**
     * Gets billing_handle_enabled
     *
     * @return bool|null
     */
    public function getBillingHandleEnabled()
    {
        return $this->container['billing_handle_enabled'];
    }

    /**
     * Sets billing_handle_enabled
     *
     * @param bool|null $billing_handle_enabled billing_handle_enabled
     *
     * @return self
     */
    public function setBillingHandleEnabled($billing_handle_enabled)
    {
        if (is_null($billing_handle_enabled)) {
            throw new \InvalidArgumentException('non-nullable billing_handle_enabled cannot be null');
        }
        $this->container['billing_handle_enabled'] = $billing_handle_enabled;

        return $this;
    }

    /**
     * Gets billing_handle_supported
     *
     * @return bool|null
     */
    public function getBillingHandleSupported()
    {
        return $this->container['billing_handle_supported'];
    }

    /**
     * Sets billing_handle_supported
     *
     * @param bool|null $billing_handle_supported billing_handle_supported
     *
     * @return self
     */
    public function setBillingHandleSupported($billing_handle_supported)
    {
        if (is_null($billing_handle_supported)) {
            throw new \InvalidArgumentException('non-nullable billing_handle_supported cannot be null');
        }
        $this->container['billing_handle_supported'] = $billing_handle_supported;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Savvii\OpenproviderRest\Model\TldDescription|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Savvii\OpenproviderRest\Model\TldDescription|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets dnssec_algorithms
     *
     * @return int[]|null
     */
    public function getDnssecAlgorithms()
    {
        return $this->container['dnssec_algorithms'];
    }

    /**
     * Sets dnssec_algorithms
     *
     * @param int[]|null $dnssec_algorithms dnssec_algorithms
     *
     * @return self
     */
    public function setDnssecAlgorithms($dnssec_algorithms)
    {
        if (is_null($dnssec_algorithms)) {
            throw new \InvalidArgumentException('non-nullable dnssec_algorithms cannot be null');
        }
        $this->container['dnssec_algorithms'] = $dnssec_algorithms;

        return $this;
    }

    /**
     * Gets dnssec_allowed
     *
     * @return bool|null
     */
    public function getDnssecAllowed()
    {
        return $this->container['dnssec_allowed'];
    }

    /**
     * Sets dnssec_allowed
     *
     * @param bool|null $dnssec_allowed dnssec_allowed
     *
     * @return self
     */
    public function setDnssecAllowed($dnssec_allowed)
    {
        if (is_null($dnssec_allowed)) {
            throw new \InvalidArgumentException('non-nullable dnssec_allowed cannot be null');
        }
        $this->container['dnssec_allowed'] = $dnssec_allowed;

        return $this;
    }

    /**
     * Gets dnssec_digests_allowed
     *
     * @return bool|null
     */
    public function getDnssecDigestsAllowed()
    {
        return $this->container['dnssec_digests_allowed'];
    }

    /**
     * Sets dnssec_digests_allowed
     *
     * @param bool|null $dnssec_digests_allowed dnssec_digests_allowed
     *
     * @return self
     */
    public function setDnssecDigestsAllowed($dnssec_digests_allowed)
    {
        if (is_null($dnssec_digests_allowed)) {
            throw new \InvalidArgumentException('non-nullable dnssec_digests_allowed cannot be null');
        }
        $this->container['dnssec_digests_allowed'] = $dnssec_digests_allowed;

        return $this;
    }

    /**
     * Gets dnssec_keys_allowed
     *
     * @return bool|null
     */
    public function getDnssecKeysAllowed()
    {
        return $this->container['dnssec_keys_allowed'];
    }

    /**
     * Sets dnssec_keys_allowed
     *
     * @param bool|null $dnssec_keys_allowed dnssec_keys_allowed
     *
     * @return self
     */
    public function setDnssecKeysAllowed($dnssec_keys_allowed)
    {
        if (is_null($dnssec_keys_allowed)) {
            throw new \InvalidArgumentException('non-nullable dnssec_keys_allowed cannot be null');
        }
        $this->container['dnssec_keys_allowed'] = $dnssec_keys_allowed;

        return $this;
    }

    /**
     * Gets dnssec_max_records_amount
     *
     * @return int|null
     */
    public function getDnssecMaxRecordsAmount()
    {
        return $this->container['dnssec_max_records_amount'];
    }

    /**
     * Sets dnssec_max_records_amount
     *
     * @param int|null $dnssec_max_records_amount dnssec_max_records_amount
     *
     * @return self
     */
    public function setDnssecMaxRecordsAmount($dnssec_max_records_amount)
    {
        if (is_null($dnssec_max_records_amount)) {
            throw new \InvalidArgumentException('non-nullable dnssec_max_records_amount cannot be null');
        }
        $this->container['dnssec_max_records_amount'] = $dnssec_max_records_amount;

        return $this;
    }

    /**
     * Gets domicile_available
     *
     * @return bool|null
     */
    public function getDomicileAvailable()
    {
        return $this->container['domicile_available'];
    }

    /**
     * Sets domicile_available
     *
     * @param bool|null $domicile_available domicile_available
     *
     * @return self
     */
    public function setDomicileAvailable($domicile_available)
    {
        if (is_null($domicile_available)) {
            throw new \InvalidArgumentException('non-nullable domicile_available cannot be null');
        }
        $this->container['domicile_available'] = $domicile_available;

        return $this;
    }

    /**
     * Gets is_auth_code_available
     *
     * @return bool|null
     */
    public function getIsAuthCodeAvailable()
    {
        return $this->container['is_auth_code_available'];
    }

    /**
     * Sets is_auth_code_available
     *
     * @param bool|null $is_auth_code_available is_auth_code_available
     *
     * @return self
     */
    public function setIsAuthCodeAvailable($is_auth_code_available)
    {
        if (is_null($is_auth_code_available)) {
            throw new \InvalidArgumentException('non-nullable is_auth_code_available cannot be null');
        }
        $this->container['is_auth_code_available'] = $is_auth_code_available;

        return $this;
    }

    /**
     * Gets is_auth_code_changeable
     *
     * @return bool|null
     */
    public function getIsAuthCodeChangeable()
    {
        return $this->container['is_auth_code_changeable'];
    }

    /**
     * Sets is_auth_code_changeable
     *
     * @param bool|null $is_auth_code_changeable is_auth_code_changeable
     *
     * @return self
     */
    public function setIsAuthCodeChangeable($is_auth_code_changeable)
    {
        if (is_null($is_auth_code_changeable)) {
            throw new \InvalidArgumentException('non-nullable is_auth_code_changeable cannot be null');
        }
        $this->container['is_auth_code_changeable'] = $is_auth_code_changeable;

        return $this;
    }

    /**
     * Gets is_auth_code_requested
     *
     * @return bool|null
     */
    public function getIsAuthCodeRequested()
    {
        return $this->container['is_auth_code_requested'];
    }

    /**
     * Sets is_auth_code_requested
     *
     * @param bool|null $is_auth_code_requested is_auth_code_requested
     *
     * @return self
     */
    public function setIsAuthCodeRequested($is_auth_code_requested)
    {
        if (is_null($is_auth_code_requested)) {
            throw new \InvalidArgumentException('non-nullable is_auth_code_requested cannot be null');
        }
        $this->container['is_auth_code_requested'] = $is_auth_code_requested;

        return $this;
    }

    /**
     * Gets is_private_whois_allowed
     *
     * @return bool|null
     */
    public function getIsPrivateWhoisAllowed()
    {
        return $this->container['is_private_whois_allowed'];
    }

    /**
     * Sets is_private_whois_allowed
     *
     * @param bool|null $is_private_whois_allowed is_private_whois_allowed
     *
     * @return self
     */
    public function setIsPrivateWhoisAllowed($is_private_whois_allowed)
    {
        if (is_null($is_private_whois_allowed)) {
            throw new \InvalidArgumentException('non-nullable is_private_whois_allowed cannot be null');
        }
        $this->container['is_private_whois_allowed'] = $is_private_whois_allowed;

        return $this;
    }

    /**
     * Gets is_trade_auth_code_required
     *
     * @return bool|null
     */
    public function getIsTradeAuthCodeRequired()
    {
        return $this->container['is_trade_auth_code_required'];
    }

    /**
     * Sets is_trade_auth_code_required
     *
     * @param bool|null $is_trade_auth_code_required is_trade_auth_code_required
     *
     * @return self
     */
    public function setIsTradeAuthCodeRequired($is_trade_auth_code_required)
    {
        if (is_null($is_trade_auth_code_required)) {
            throw new \InvalidArgumentException('non-nullable is_trade_auth_code_required cannot be null');
        }
        $this->container['is_trade_auth_code_required'] = $is_trade_auth_code_required;

        return $this;
    }

    /**
     * Gets is_transfer_auth_code_required
     *
     * @return bool|null
     */
    public function getIsTransferAuthCodeRequired()
    {
        return $this->container['is_transfer_auth_code_required'];
    }

    /**
     * Sets is_transfer_auth_code_required
     *
     * @param bool|null $is_transfer_auth_code_required is_transfer_auth_code_required
     *
     * @return self
     */
    public function setIsTransferAuthCodeRequired($is_transfer_auth_code_required)
    {
        if (is_null($is_transfer_auth_code_required)) {
            throw new \InvalidArgumentException('non-nullable is_transfer_auth_code_required cannot be null');
        }
        $this->container['is_transfer_auth_code_required'] = $is_transfer_auth_code_required;

        return $this;
    }

    /**
     * Gets level_prices
     *
     * @return \Savvii\OpenproviderRest\Model\TldLevelPrice[]|null
     */
    public function getLevelPrices()
    {
        return $this->container['level_prices'];
    }

    /**
     * Sets level_prices
     *
     * @param \Savvii\OpenproviderRest\Model\TldLevelPrice[]|null $level_prices level_prices
     *
     * @return self
     */
    public function setLevelPrices($level_prices)
    {
        if (is_null($level_prices)) {
            throw new \InvalidArgumentException('non-nullable level_prices cannot be null');
        }
        $this->container['level_prices'] = $level_prices;

        return $this;
    }

    /**
     * Gets max_period
     *
     * @return int|null
     */
    public function getMaxPeriod()
    {
        return $this->container['max_period'];
    }

    /**
     * Sets max_period
     *
     * @param int|null $max_period max_period
     *
     * @return self
     */
    public function setMaxPeriod($max_period)
    {
        if (is_null($max_period)) {
            throw new \InvalidArgumentException('non-nullable max_period cannot be null');
        }
        $this->container['max_period'] = $max_period;

        return $this;
    }

    /**
     * Gets min_period
     *
     * @return int|null
     */
    public function getMinPeriod()
    {
        return $this->container['min_period'];
    }

    /**
     * Sets min_period
     *
     * @param int|null $min_period min_period
     *
     * @return self
     */
    public function setMinPeriod($min_period)
    {
        if (is_null($min_period)) {
            throw new \InvalidArgumentException('non-nullable min_period cannot be null');
        }
        $this->container['min_period'] = $min_period;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner_handle_supported
     *
     * @return bool|null
     */
    public function getOwnerHandleSupported()
    {
        return $this->container['owner_handle_supported'];
    }

    /**
     * Sets owner_handle_supported
     *
     * @param bool|null $owner_handle_supported owner_handle_supported
     *
     * @return self
     */
    public function setOwnerHandleSupported($owner_handle_supported)
    {
        if (is_null($owner_handle_supported)) {
            throw new \InvalidArgumentException('non-nullable owner_handle_supported cannot be null');
        }
        $this->container['owner_handle_supported'] = $owner_handle_supported;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \Savvii\OpenproviderRest\Model\TldPrices|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \Savvii\OpenproviderRest\Model\TldPrices|null $prices prices
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            throw new \InvalidArgumentException('non-nullable prices cannot be null');
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets quarantine_period
     *
     * @return int|null
     */
    public function getQuarantinePeriod()
    {
        return $this->container['quarantine_period'];
    }

    /**
     * Sets quarantine_period
     *
     * @param int|null $quarantine_period quarantine_period
     *
     * @return self
     */
    public function setQuarantinePeriod($quarantine_period)
    {
        if (is_null($quarantine_period)) {
            throw new \InvalidArgumentException('non-nullable quarantine_period cannot be null');
        }
        $this->container['quarantine_period'] = $quarantine_period;

        return $this;
    }

    /**
     * Gets renew_available
     *
     * @return bool|null
     */
    public function getRenewAvailable()
    {
        return $this->container['renew_available'];
    }

    /**
     * Sets renew_available
     *
     * @param bool|null $renew_available renew_available
     *
     * @return self
     */
    public function setRenewAvailable($renew_available)
    {
        if (is_null($renew_available)) {
            throw new \InvalidArgumentException('non-nullable renew_available cannot be null');
        }
        $this->container['renew_available'] = $renew_available;

        return $this;
    }

    /**
     * Gets reseller_handle_enabled
     *
     * @return bool|null
     */
    public function getResellerHandleEnabled()
    {
        return $this->container['reseller_handle_enabled'];
    }

    /**
     * Sets reseller_handle_enabled
     *
     * @param bool|null $reseller_handle_enabled reseller_handle_enabled
     *
     * @return self
     */
    public function setResellerHandleEnabled($reseller_handle_enabled)
    {
        if (is_null($reseller_handle_enabled)) {
            throw new \InvalidArgumentException('non-nullable reseller_handle_enabled cannot be null');
        }
        $this->container['reseller_handle_enabled'] = $reseller_handle_enabled;

        return $this;
    }

    /**
     * Gets reseller_handle_supported
     *
     * @return bool|null
     */
    public function getResellerHandleSupported()
    {
        return $this->container['reseller_handle_supported'];
    }

    /**
     * Sets reseller_handle_supported
     *
     * @param bool|null $reseller_handle_supported reseller_handle_supported
     *
     * @return self
     */
    public function setResellerHandleSupported($reseller_handle_supported)
    {
        if (is_null($reseller_handle_supported)) {
            throw new \InvalidArgumentException('non-nullable reseller_handle_supported cannot be null');
        }
        $this->container['reseller_handle_supported'] = $reseller_handle_supported;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return string[]|null
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param string[]|null $restrictions restrictions
     *
     * @return self
     */
    public function setRestrictions($restrictions)
    {
        if (is_null($restrictions)) {
            throw new \InvalidArgumentException('non-nullable restrictions cannot be null');
        }
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets soft_quarantine_period
     *
     * @return int|null
     */
    public function getSoftQuarantinePeriod()
    {
        return $this->container['soft_quarantine_period'];
    }

    /**
     * Sets soft_quarantine_period
     *
     * @param int|null $soft_quarantine_period soft_quarantine_period
     *
     * @return self
     */
    public function setSoftQuarantinePeriod($soft_quarantine_period)
    {
        if (is_null($soft_quarantine_period)) {
            throw new \InvalidArgumentException('non-nullable soft_quarantine_period cannot be null');
        }
        $this->container['soft_quarantine_period'] = $soft_quarantine_period;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets supported_application_mode
     *
     * @return \Savvii\OpenproviderRest\Model\TldApplicationMode[]|null
     */
    public function getSupportedApplicationMode()
    {
        return $this->container['supported_application_mode'];
    }

    /**
     * Sets supported_application_mode
     *
     * @param \Savvii\OpenproviderRest\Model\TldApplicationMode[]|null $supported_application_mode supported_application_mode
     *
     * @return self
     */
    public function setSupportedApplicationMode($supported_application_mode)
    {
        if (is_null($supported_application_mode)) {
            throw new \InvalidArgumentException('non-nullable supported_application_mode cannot be null');
        }
        $this->container['supported_application_mode'] = $supported_application_mode;

        return $this;
    }

    /**
     * Gets supported_idn_scripts
     *
     * @return \Savvii\OpenproviderRest\Model\TldIdnScript[]|null
     */
    public function getSupportedIdnScripts()
    {
        return $this->container['supported_idn_scripts'];
    }

    /**
     * Sets supported_idn_scripts
     *
     * @param \Savvii\OpenproviderRest\Model\TldIdnScript[]|null $supported_idn_scripts supported_idn_scripts
     *
     * @return self
     */
    public function setSupportedIdnScripts($supported_idn_scripts)
    {
        if (is_null($supported_idn_scripts)) {
            throw new \InvalidArgumentException('non-nullable supported_idn_scripts cannot be null');
        }
        $this->container['supported_idn_scripts'] = $supported_idn_scripts;

        return $this;
    }

    /**
     * Gets tech_handle_supported
     *
     * @return bool|null
     */
    public function getTechHandleSupported()
    {
        return $this->container['tech_handle_supported'];
    }

    /**
     * Sets tech_handle_supported
     *
     * @param bool|null $tech_handle_supported tech_handle_supported
     *
     * @return self
     */
    public function setTechHandleSupported($tech_handle_supported)
    {
        if (is_null($tech_handle_supported)) {
            throw new \InvalidArgumentException('non-nullable tech_handle_supported cannot be null');
        }
        $this->container['tech_handle_supported'] = $tech_handle_supported;

        return $this;
    }

    /**
     * Gets trade_available
     *
     * @return bool|null
     */
    public function getTradeAvailable()
    {
        return $this->container['trade_available'];
    }

    /**
     * Sets trade_available
     *
     * @param bool|null $trade_available trade_available
     *
     * @return self
     */
    public function setTradeAvailable($trade_available)
    {
        if (is_null($trade_available)) {
            throw new \InvalidArgumentException('non-nullable trade_available cannot be null');
        }
        $this->container['trade_available'] = $trade_available;

        return $this;
    }

    /**
     * Gets transfer_available
     *
     * @return bool|null
     */
    public function getTransferAvailable()
    {
        return $this->container['transfer_available'];
    }

    /**
     * Sets transfer_available
     *
     * @param bool|null $transfer_available transfer_available
     *
     * @return self
     */
    public function setTransferAvailable($transfer_available)
    {
        if (is_null($transfer_available)) {
            throw new \InvalidArgumentException('non-nullable transfer_available cannot be null');
        }
        $this->container['transfer_available'] = $transfer_available;

        return $this;
    }

    /**
     * Gets usage_count
     *
     * @return int|null
     */
    public function getUsageCount()
    {
        return $this->container['usage_count'];
    }

    /**
     * Sets usage_count
     *
     * @param int|null $usage_count usage_count
     *
     * @return self
     */
    public function setUsageCount($usage_count)
    {
        if (is_null($usage_count)) {
            throw new \InvalidArgumentException('non-nullable usage_count cannot be null');
        }
        $this->container['usage_count'] = $usage_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


