<?php
/**
 * OrderSslOrderAdditionalData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * OrderSslOrderAdditionalData Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderSslOrderAdditionalData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderSslOrderAdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dns' => 'string',
        'dns_record' => 'string',
        'dns_value' => 'string',
        'domain' => 'string',
        'file_content' => 'string',
        'file_contents' => 'string',
        'file_location' => 'string',
        'file_name' => 'string',
        'md5' => 'string',
        'old_cert_format' => 'string[]',
        'sha1' => 'string',
        'sha256' => 'string',
        'token' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dns' => null,
        'dns_record' => null,
        'dns_value' => null,
        'domain' => null,
        'file_content' => null,
        'file_contents' => null,
        'file_location' => null,
        'file_name' => null,
        'md5' => null,
        'old_cert_format' => null,
        'sha1' => null,
        'sha256' => null,
        'token' => null,
        'url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dns' => false,
		'dns_record' => false,
		'dns_value' => false,
		'domain' => false,
		'file_content' => false,
		'file_contents' => false,
		'file_location' => false,
		'file_name' => false,
		'md5' => false,
		'old_cert_format' => false,
		'sha1' => false,
		'sha256' => false,
		'token' => false,
		'url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dns' => 'dns',
        'dns_record' => 'dns_record',
        'dns_value' => 'dns_value',
        'domain' => 'domain',
        'file_content' => 'file_content',
        'file_contents' => 'file_contents',
        'file_location' => 'file_location',
        'file_name' => 'file_name',
        'md5' => 'md5',
        'old_cert_format' => 'old_cert_format',
        'sha1' => 'sha1',
        'sha256' => 'sha256',
        'token' => 'token',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dns' => 'setDns',
        'dns_record' => 'setDnsRecord',
        'dns_value' => 'setDnsValue',
        'domain' => 'setDomain',
        'file_content' => 'setFileContent',
        'file_contents' => 'setFileContents',
        'file_location' => 'setFileLocation',
        'file_name' => 'setFileName',
        'md5' => 'setMd5',
        'old_cert_format' => 'setOldCertFormat',
        'sha1' => 'setSha1',
        'sha256' => 'setSha256',
        'token' => 'setToken',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dns' => 'getDns',
        'dns_record' => 'getDnsRecord',
        'dns_value' => 'getDnsValue',
        'domain' => 'getDomain',
        'file_content' => 'getFileContent',
        'file_contents' => 'getFileContents',
        'file_location' => 'getFileLocation',
        'file_name' => 'getFileName',
        'md5' => 'getMd5',
        'old_cert_format' => 'getOldCertFormat',
        'sha1' => 'getSha1',
        'sha256' => 'getSha256',
        'token' => 'getToken',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dns', $data ?? [], null);
        $this->setIfExists('dns_record', $data ?? [], null);
        $this->setIfExists('dns_value', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('file_content', $data ?? [], null);
        $this->setIfExists('file_contents', $data ?? [], null);
        $this->setIfExists('file_location', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('md5', $data ?? [], null);
        $this->setIfExists('old_cert_format', $data ?? [], null);
        $this->setIfExists('sha1', $data ?? [], null);
        $this->setIfExists('sha256', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dns
     *
     * @return string|null
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param string|null $dns dns
     *
     * @return self
     */
    public function setDns($dns)
    {
        if (is_null($dns)) {
            throw new \InvalidArgumentException('non-nullable dns cannot be null');
        }
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets dns_record
     *
     * @return string|null
     */
    public function getDnsRecord()
    {
        return $this->container['dns_record'];
    }

    /**
     * Sets dns_record
     *
     * @param string|null $dns_record dns_record
     *
     * @return self
     */
    public function setDnsRecord($dns_record)
    {
        if (is_null($dns_record)) {
            throw new \InvalidArgumentException('non-nullable dns_record cannot be null');
        }
        $this->container['dns_record'] = $dns_record;

        return $this;
    }

    /**
     * Gets dns_value
     *
     * @return string|null
     */
    public function getDnsValue()
    {
        return $this->container['dns_value'];
    }

    /**
     * Sets dns_value
     *
     * @param string|null $dns_value dns_value
     *
     * @return self
     */
    public function setDnsValue($dns_value)
    {
        if (is_null($dns_value)) {
            throw new \InvalidArgumentException('non-nullable dns_value cannot be null');
        }
        $this->container['dns_value'] = $dns_value;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets file_content
     *
     * @return string|null
     */
    public function getFileContent()
    {
        return $this->container['file_content'];
    }

    /**
     * Sets file_content
     *
     * @param string|null $file_content file_content
     *
     * @return self
     */
    public function setFileContent($file_content)
    {
        if (is_null($file_content)) {
            throw new \InvalidArgumentException('non-nullable file_content cannot be null');
        }
        $this->container['file_content'] = $file_content;

        return $this;
    }

    /**
     * Gets file_contents
     *
     * @return string|null
     */
    public function getFileContents()
    {
        return $this->container['file_contents'];
    }

    /**
     * Sets file_contents
     *
     * @param string|null $file_contents file_contents
     *
     * @return self
     */
    public function setFileContents($file_contents)
    {
        if (is_null($file_contents)) {
            throw new \InvalidArgumentException('non-nullable file_contents cannot be null');
        }
        $this->container['file_contents'] = $file_contents;

        return $this;
    }

    /**
     * Gets file_location
     *
     * @return string|null
     */
    public function getFileLocation()
    {
        return $this->container['file_location'];
    }

    /**
     * Sets file_location
     *
     * @param string|null $file_location file_location
     *
     * @return self
     */
    public function setFileLocation($file_location)
    {
        if (is_null($file_location)) {
            throw new \InvalidArgumentException('non-nullable file_location cannot be null');
        }
        $this->container['file_location'] = $file_location;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (is_null($md5)) {
            throw new \InvalidArgumentException('non-nullable md5 cannot be null');
        }
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets old_cert_format
     *
     * @return string[]|null
     */
    public function getOldCertFormat()
    {
        return $this->container['old_cert_format'];
    }

    /**
     * Sets old_cert_format
     *
     * @param string[]|null $old_cert_format old_cert_format
     *
     * @return self
     */
    public function setOldCertFormat($old_cert_format)
    {
        if (is_null($old_cert_format)) {
            throw new \InvalidArgumentException('non-nullable old_cert_format cannot be null');
        }
        $this->container['old_cert_format'] = $old_cert_format;

        return $this;
    }

    /**
     * Gets sha1
     *
     * @return string|null
     */
    public function getSha1()
    {
        return $this->container['sha1'];
    }

    /**
     * Sets sha1
     *
     * @param string|null $sha1 sha1
     *
     * @return self
     */
    public function setSha1($sha1)
    {
        if (is_null($sha1)) {
            throw new \InvalidArgumentException('non-nullable sha1 cannot be null');
        }
        $this->container['sha1'] = $sha1;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 sha256
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        if (is_null($sha256)) {
            throw new \InvalidArgumentException('non-nullable sha256 cannot be null');
        }
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


