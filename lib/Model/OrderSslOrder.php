<?php
/**
 * OrderSslOrder
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Savvii\OpenproviderRest\Model;

use \ArrayAccess;
use \Savvii\OpenproviderRest\ObjectSerializer;

/**
 * OrderSslOrder Class Doc Comment
 *
 * @category Class
 * @package  Savvii\OpenproviderRest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderSslOrder implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderSslOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_date' => 'string',
        'additional_data' => '\Savvii\OpenproviderRest\Model\OrderSslOrderAdditionalData[]',
        'administrative_handle' => 'string',
        'autorenew' => 'string',
        'billing_handle' => 'string',
        'brand_name' => 'string',
        'certificate' => 'string',
        'common_name' => 'string',
        'csr' => 'string',
        'domain_validation_methods' => '\Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationMethods[]',
        'domain_validation_statuses' => '\Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationStatuses',
        'email_approver' => 'string',
        'email_reissue' => 'string',
        'expiration_date' => 'string',
        'features' => 'string',
        'host_names' => 'string[]',
        'id' => 'int',
        'intermediate_certificate' => 'string',
        'options' => '\Savvii\OpenproviderRest\Model\OrderSslOrderOptions',
        'order_date' => 'string',
        'order_ends_at' => 'string',
        'organization_handle' => 'string',
        'period' => 'int',
        'product_id' => 'int',
        'product_name' => 'string',
        'reissue_at' => 'string',
        'root_certificate' => 'string',
        'software' => 'string',
        'sslinhva_order_id' => 'string',
        'status' => 'string',
        'technical_handle' => 'string',
        'validation_method' => 'string',
        'vendor_order_id' => 'string',
        'vendor_reference_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_date' => null,
        'additional_data' => null,
        'administrative_handle' => null,
        'autorenew' => null,
        'billing_handle' => null,
        'brand_name' => null,
        'certificate' => null,
        'common_name' => null,
        'csr' => null,
        'domain_validation_methods' => null,
        'domain_validation_statuses' => null,
        'email_approver' => null,
        'email_reissue' => null,
        'expiration_date' => null,
        'features' => null,
        'host_names' => null,
        'id' => 'int32',
        'intermediate_certificate' => null,
        'options' => null,
        'order_date' => null,
        'order_ends_at' => null,
        'organization_handle' => null,
        'period' => 'int32',
        'product_id' => 'int32',
        'product_name' => null,
        'reissue_at' => null,
        'root_certificate' => null,
        'software' => null,
        'sslinhva_order_id' => null,
        'status' => null,
        'technical_handle' => null,
        'validation_method' => null,
        'vendor_order_id' => null,
        'vendor_reference_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active_date' => false,
		'additional_data' => false,
		'administrative_handle' => false,
		'autorenew' => false,
		'billing_handle' => false,
		'brand_name' => false,
		'certificate' => false,
		'common_name' => false,
		'csr' => false,
		'domain_validation_methods' => false,
		'domain_validation_statuses' => false,
		'email_approver' => false,
		'email_reissue' => false,
		'expiration_date' => false,
		'features' => false,
		'host_names' => false,
		'id' => false,
		'intermediate_certificate' => false,
		'options' => false,
		'order_date' => false,
		'order_ends_at' => false,
		'organization_handle' => false,
		'period' => false,
		'product_id' => false,
		'product_name' => false,
		'reissue_at' => false,
		'root_certificate' => false,
		'software' => false,
		'sslinhva_order_id' => false,
		'status' => false,
		'technical_handle' => false,
		'validation_method' => false,
		'vendor_order_id' => false,
		'vendor_reference_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_date' => 'active_date',
        'additional_data' => 'additional_data',
        'administrative_handle' => 'administrative_handle',
        'autorenew' => 'autorenew',
        'billing_handle' => 'billing_handle',
        'brand_name' => 'brand_name',
        'certificate' => 'certificate',
        'common_name' => 'common_name',
        'csr' => 'csr',
        'domain_validation_methods' => 'domain_validation_methods',
        'domain_validation_statuses' => 'domain_validation_statuses',
        'email_approver' => 'email_approver',
        'email_reissue' => 'email_reissue',
        'expiration_date' => 'expiration_date',
        'features' => 'features',
        'host_names' => 'host_names',
        'id' => 'id',
        'intermediate_certificate' => 'intermediate_certificate',
        'options' => 'options',
        'order_date' => 'order_date',
        'order_ends_at' => 'order_ends_at',
        'organization_handle' => 'organization_handle',
        'period' => 'period',
        'product_id' => 'product_id',
        'product_name' => 'product_name',
        'reissue_at' => 'reissue_at',
        'root_certificate' => 'root_certificate',
        'software' => 'software',
        'sslinhva_order_id' => 'sslinhva_order_id',
        'status' => 'status',
        'technical_handle' => 'technical_handle',
        'validation_method' => 'validation_method',
        'vendor_order_id' => 'vendor_order_id',
        'vendor_reference_id' => 'vendor_reference_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_date' => 'setActiveDate',
        'additional_data' => 'setAdditionalData',
        'administrative_handle' => 'setAdministrativeHandle',
        'autorenew' => 'setAutorenew',
        'billing_handle' => 'setBillingHandle',
        'brand_name' => 'setBrandName',
        'certificate' => 'setCertificate',
        'common_name' => 'setCommonName',
        'csr' => 'setCsr',
        'domain_validation_methods' => 'setDomainValidationMethods',
        'domain_validation_statuses' => 'setDomainValidationStatuses',
        'email_approver' => 'setEmailApprover',
        'email_reissue' => 'setEmailReissue',
        'expiration_date' => 'setExpirationDate',
        'features' => 'setFeatures',
        'host_names' => 'setHostNames',
        'id' => 'setId',
        'intermediate_certificate' => 'setIntermediateCertificate',
        'options' => 'setOptions',
        'order_date' => 'setOrderDate',
        'order_ends_at' => 'setOrderEndsAt',
        'organization_handle' => 'setOrganizationHandle',
        'period' => 'setPeriod',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'reissue_at' => 'setReissueAt',
        'root_certificate' => 'setRootCertificate',
        'software' => 'setSoftware',
        'sslinhva_order_id' => 'setSslinhvaOrderId',
        'status' => 'setStatus',
        'technical_handle' => 'setTechnicalHandle',
        'validation_method' => 'setValidationMethod',
        'vendor_order_id' => 'setVendorOrderId',
        'vendor_reference_id' => 'setVendorReferenceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_date' => 'getActiveDate',
        'additional_data' => 'getAdditionalData',
        'administrative_handle' => 'getAdministrativeHandle',
        'autorenew' => 'getAutorenew',
        'billing_handle' => 'getBillingHandle',
        'brand_name' => 'getBrandName',
        'certificate' => 'getCertificate',
        'common_name' => 'getCommonName',
        'csr' => 'getCsr',
        'domain_validation_methods' => 'getDomainValidationMethods',
        'domain_validation_statuses' => 'getDomainValidationStatuses',
        'email_approver' => 'getEmailApprover',
        'email_reissue' => 'getEmailReissue',
        'expiration_date' => 'getExpirationDate',
        'features' => 'getFeatures',
        'host_names' => 'getHostNames',
        'id' => 'getId',
        'intermediate_certificate' => 'getIntermediateCertificate',
        'options' => 'getOptions',
        'order_date' => 'getOrderDate',
        'order_ends_at' => 'getOrderEndsAt',
        'organization_handle' => 'getOrganizationHandle',
        'period' => 'getPeriod',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'reissue_at' => 'getReissueAt',
        'root_certificate' => 'getRootCertificate',
        'software' => 'getSoftware',
        'sslinhva_order_id' => 'getSslinhvaOrderId',
        'status' => 'getStatus',
        'technical_handle' => 'getTechnicalHandle',
        'validation_method' => 'getValidationMethod',
        'vendor_order_id' => 'getVendorOrderId',
        'vendor_reference_id' => 'getVendorReferenceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active_date', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('administrative_handle', $data ?? [], null);
        $this->setIfExists('autorenew', $data ?? [], null);
        $this->setIfExists('billing_handle', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('common_name', $data ?? [], null);
        $this->setIfExists('csr', $data ?? [], null);
        $this->setIfExists('domain_validation_methods', $data ?? [], null);
        $this->setIfExists('domain_validation_statuses', $data ?? [], null);
        $this->setIfExists('email_approver', $data ?? [], null);
        $this->setIfExists('email_reissue', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('host_names', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intermediate_certificate', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('order_ends_at', $data ?? [], null);
        $this->setIfExists('organization_handle', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('reissue_at', $data ?? [], null);
        $this->setIfExists('root_certificate', $data ?? [], null);
        $this->setIfExists('software', $data ?? [], null);
        $this->setIfExists('sslinhva_order_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('technical_handle', $data ?? [], null);
        $this->setIfExists('validation_method', $data ?? [], null);
        $this->setIfExists('vendor_order_id', $data ?? [], null);
        $this->setIfExists('vendor_reference_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_date
     *
     * @return string|null
     */
    public function getActiveDate()
    {
        return $this->container['active_date'];
    }

    /**
     * Sets active_date
     *
     * @param string|null $active_date active_date
     *
     * @return self
     */
    public function setActiveDate($active_date)
    {
        if (is_null($active_date)) {
            throw new \InvalidArgumentException('non-nullable active_date cannot be null');
        }
        $this->container['active_date'] = $active_date;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \Savvii\OpenproviderRest\Model\OrderSslOrderAdditionalData[]|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Savvii\OpenproviderRest\Model\OrderSslOrderAdditionalData[]|null $additional_data additional_data
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets administrative_handle
     *
     * @return string|null
     */
    public function getAdministrativeHandle()
    {
        return $this->container['administrative_handle'];
    }

    /**
     * Sets administrative_handle
     *
     * @param string|null $administrative_handle administrative_handle
     *
     * @return self
     */
    public function setAdministrativeHandle($administrative_handle)
    {
        if (is_null($administrative_handle)) {
            throw new \InvalidArgumentException('non-nullable administrative_handle cannot be null');
        }
        $this->container['administrative_handle'] = $administrative_handle;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return string|null
     */
    public function getAutorenew()
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param string|null $autorenew autorenew
     *
     * @return self
     */
    public function setAutorenew($autorenew)
    {
        if (is_null($autorenew)) {
            throw new \InvalidArgumentException('non-nullable autorenew cannot be null');
        }
        $this->container['autorenew'] = $autorenew;

        return $this;
    }

    /**
     * Gets billing_handle
     *
     * @return string|null
     */
    public function getBillingHandle()
    {
        return $this->container['billing_handle'];
    }

    /**
     * Sets billing_handle
     *
     * @param string|null $billing_handle billing_handle
     *
     * @return self
     */
    public function setBillingHandle($billing_handle)
    {
        if (is_null($billing_handle)) {
            throw new \InvalidArgumentException('non-nullable billing_handle cannot be null');
        }
        $this->container['billing_handle'] = $billing_handle;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name brand_name
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            throw new \InvalidArgumentException('non-nullable brand_name cannot be null');
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate certificate
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets common_name
     *
     * @return string|null
     */
    public function getCommonName()
    {
        return $this->container['common_name'];
    }

    /**
     * Sets common_name
     *
     * @param string|null $common_name common_name
     *
     * @return self
     */
    public function setCommonName($common_name)
    {
        if (is_null($common_name)) {
            throw new \InvalidArgumentException('non-nullable common_name cannot be null');
        }
        $this->container['common_name'] = $common_name;

        return $this;
    }

    /**
     * Gets csr
     *
     * @return string|null
     */
    public function getCsr()
    {
        return $this->container['csr'];
    }

    /**
     * Sets csr
     *
     * @param string|null $csr csr
     *
     * @return self
     */
    public function setCsr($csr)
    {
        if (is_null($csr)) {
            throw new \InvalidArgumentException('non-nullable csr cannot be null');
        }
        $this->container['csr'] = $csr;

        return $this;
    }

    /**
     * Gets domain_validation_methods
     *
     * @return \Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationMethods[]|null
     */
    public function getDomainValidationMethods()
    {
        return $this->container['domain_validation_methods'];
    }

    /**
     * Sets domain_validation_methods
     *
     * @param \Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationMethods[]|null $domain_validation_methods domain_validation_methods
     *
     * @return self
     */
    public function setDomainValidationMethods($domain_validation_methods)
    {
        if (is_null($domain_validation_methods)) {
            throw new \InvalidArgumentException('non-nullable domain_validation_methods cannot be null');
        }
        $this->container['domain_validation_methods'] = $domain_validation_methods;

        return $this;
    }

    /**
     * Gets domain_validation_statuses
     *
     * @return \Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationStatuses|null
     */
    public function getDomainValidationStatuses()
    {
        return $this->container['domain_validation_statuses'];
    }

    /**
     * Sets domain_validation_statuses
     *
     * @param \Savvii\OpenproviderRest\Model\OrderSslOrderDomainValidationStatuses|null $domain_validation_statuses domain_validation_statuses
     *
     * @return self
     */
    public function setDomainValidationStatuses($domain_validation_statuses)
    {
        if (is_null($domain_validation_statuses)) {
            throw new \InvalidArgumentException('non-nullable domain_validation_statuses cannot be null');
        }
        $this->container['domain_validation_statuses'] = $domain_validation_statuses;

        return $this;
    }

    /**
     * Gets email_approver
     *
     * @return string|null
     */
    public function getEmailApprover()
    {
        return $this->container['email_approver'];
    }

    /**
     * Sets email_approver
     *
     * @param string|null $email_approver email_approver
     *
     * @return self
     */
    public function setEmailApprover($email_approver)
    {
        if (is_null($email_approver)) {
            throw new \InvalidArgumentException('non-nullable email_approver cannot be null');
        }
        $this->container['email_approver'] = $email_approver;

        return $this;
    }

    /**
     * Gets email_reissue
     *
     * @return string|null
     */
    public function getEmailReissue()
    {
        return $this->container['email_reissue'];
    }

    /**
     * Sets email_reissue
     *
     * @param string|null $email_reissue email_reissue
     *
     * @return self
     */
    public function setEmailReissue($email_reissue)
    {
        if (is_null($email_reissue)) {
            throw new \InvalidArgumentException('non-nullable email_reissue cannot be null');
        }
        $this->container['email_reissue'] = $email_reissue;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets host_names
     *
     * @return string[]|null
     */
    public function getHostNames()
    {
        return $this->container['host_names'];
    }

    /**
     * Sets host_names
     *
     * @param string[]|null $host_names host_names
     *
     * @return self
     */
    public function setHostNames($host_names)
    {
        if (is_null($host_names)) {
            throw new \InvalidArgumentException('non-nullable host_names cannot be null');
        }
        $this->container['host_names'] = $host_names;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intermediate_certificate
     *
     * @return string|null
     */
    public function getIntermediateCertificate()
    {
        return $this->container['intermediate_certificate'];
    }

    /**
     * Sets intermediate_certificate
     *
     * @param string|null $intermediate_certificate intermediate_certificate
     *
     * @return self
     */
    public function setIntermediateCertificate($intermediate_certificate)
    {
        if (is_null($intermediate_certificate)) {
            throw new \InvalidArgumentException('non-nullable intermediate_certificate cannot be null');
        }
        $this->container['intermediate_certificate'] = $intermediate_certificate;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Savvii\OpenproviderRest\Model\OrderSslOrderOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Savvii\OpenproviderRest\Model\OrderSslOrderOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string|null $order_date order_date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets order_ends_at
     *
     * @return string|null
     */
    public function getOrderEndsAt()
    {
        return $this->container['order_ends_at'];
    }

    /**
     * Sets order_ends_at
     *
     * @param string|null $order_ends_at order_ends_at
     *
     * @return self
     */
    public function setOrderEndsAt($order_ends_at)
    {
        if (is_null($order_ends_at)) {
            throw new \InvalidArgumentException('non-nullable order_ends_at cannot be null');
        }
        $this->container['order_ends_at'] = $order_ends_at;

        return $this;
    }

    /**
     * Gets organization_handle
     *
     * @return string|null
     */
    public function getOrganizationHandle()
    {
        return $this->container['organization_handle'];
    }

    /**
     * Sets organization_handle
     *
     * @param string|null $organization_handle organization_handle
     *
     * @return self
     */
    public function setOrganizationHandle($organization_handle)
    {
        if (is_null($organization_handle)) {
            throw new \InvalidArgumentException('non-nullable organization_handle cannot be null');
        }
        $this->container['organization_handle'] = $organization_handle;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets reissue_at
     *
     * @return string|null
     */
    public function getReissueAt()
    {
        return $this->container['reissue_at'];
    }

    /**
     * Sets reissue_at
     *
     * @param string|null $reissue_at reissue_at
     *
     * @return self
     */
    public function setReissueAt($reissue_at)
    {
        if (is_null($reissue_at)) {
            throw new \InvalidArgumentException('non-nullable reissue_at cannot be null');
        }
        $this->container['reissue_at'] = $reissue_at;

        return $this;
    }

    /**
     * Gets root_certificate
     *
     * @return string|null
     */
    public function getRootCertificate()
    {
        return $this->container['root_certificate'];
    }

    /**
     * Sets root_certificate
     *
     * @param string|null $root_certificate root_certificate
     *
     * @return self
     */
    public function setRootCertificate($root_certificate)
    {
        if (is_null($root_certificate)) {
            throw new \InvalidArgumentException('non-nullable root_certificate cannot be null');
        }
        $this->container['root_certificate'] = $root_certificate;

        return $this;
    }

    /**
     * Gets software
     *
     * @return string|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param string|null $software software
     *
     * @return self
     */
    public function setSoftware($software)
    {
        if (is_null($software)) {
            throw new \InvalidArgumentException('non-nullable software cannot be null');
        }
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets sslinhva_order_id
     *
     * @return string|null
     */
    public function getSslinhvaOrderId()
    {
        return $this->container['sslinhva_order_id'];
    }

    /**
     * Sets sslinhva_order_id
     *
     * @param string|null $sslinhva_order_id sslinhva_order_id
     *
     * @return self
     */
    public function setSslinhvaOrderId($sslinhva_order_id)
    {
        if (is_null($sslinhva_order_id)) {
            throw new \InvalidArgumentException('non-nullable sslinhva_order_id cannot be null');
        }
        $this->container['sslinhva_order_id'] = $sslinhva_order_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets technical_handle
     *
     * @return string|null
     */
    public function getTechnicalHandle()
    {
        return $this->container['technical_handle'];
    }

    /**
     * Sets technical_handle
     *
     * @param string|null $technical_handle technical_handle
     *
     * @return self
     */
    public function setTechnicalHandle($technical_handle)
    {
        if (is_null($technical_handle)) {
            throw new \InvalidArgumentException('non-nullable technical_handle cannot be null');
        }
        $this->container['technical_handle'] = $technical_handle;

        return $this;
    }

    /**
     * Gets validation_method
     *
     * @return string|null
     */
    public function getValidationMethod()
    {
        return $this->container['validation_method'];
    }

    /**
     * Sets validation_method
     *
     * @param string|null $validation_method validation_method
     *
     * @return self
     */
    public function setValidationMethod($validation_method)
    {
        if (is_null($validation_method)) {
            throw new \InvalidArgumentException('non-nullable validation_method cannot be null');
        }
        $this->container['validation_method'] = $validation_method;

        return $this;
    }

    /**
     * Gets vendor_order_id
     *
     * @return string|null
     */
    public function getVendorOrderId()
    {
        return $this->container['vendor_order_id'];
    }

    /**
     * Sets vendor_order_id
     *
     * @param string|null $vendor_order_id vendor_order_id
     *
     * @return self
     */
    public function setVendorOrderId($vendor_order_id)
    {
        if (is_null($vendor_order_id)) {
            throw new \InvalidArgumentException('non-nullable vendor_order_id cannot be null');
        }
        $this->container['vendor_order_id'] = $vendor_order_id;

        return $this;
    }

    /**
     * Gets vendor_reference_id
     *
     * @return string|null
     */
    public function getVendorReferenceId()
    {
        return $this->container['vendor_reference_id'];
    }

    /**
     * Sets vendor_reference_id
     *
     * @param string|null $vendor_reference_id vendor_reference_id
     *
     * @return self
     */
    public function setVendorReferenceId($vendor_reference_id)
    {
        if (is_null($vendor_reference_id)) {
            throw new \InvalidArgumentException('non-nullable vendor_reference_id cannot be null');
        }
        $this->container['vendor_reference_id'] = $vendor_reference_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


